{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Check C# codes\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Check C# codes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Step 1. Import the necessary libraries\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as  np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Step 2. Create 3 differents Series, each of length 100, as follows:\n",
    "\n",
    "#The first a random number from 1 to 4\n",
    "s1 = pd.Series(np.random.randint(1, high=5, size=100, dtype='l'))\n",
    "\n",
    "#The second a random number from 1 to 3\n",
    "s2 = pd.Series(np.random.randint(1, high=4, size=100, dtype='l'))\n",
    "\n",
    "#The third a random number from 10,000 to 30,000\n",
    "s3 = pd.Series(np.random.randint(10000, high=30001, size=100, dtype='l'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>16957</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>12263</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>12254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>12916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>20491</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   0  1      2\n",
       "0  4  1  16957\n",
       "1  3  3  12263\n",
       "2  4  3  12254\n",
       "3  1  3  12916\n",
       "4  2  1  20491"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 3. Create a DataFrame by joinning the Series by column\n",
    "\n",
    "Housing = pd.concat([s1, s2, s3], axis=1)\n",
    "Housing.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>bedrs</th>\n",
       "      <th>bathrs</th>\n",
       "      <th>price_sqr_meter</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>16957</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>12263</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>12254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>12916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>20491</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   bedrs  bathrs  price_sqr_meter\n",
       "0      4       1            16957\n",
       "1      3       3            12263\n",
       "2      4       3            12254\n",
       "3      1       3            12916\n",
       "4      2       1            20491"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 4. Change the name of the columns to bedrs, bathrs, price_sqr_meter\n",
    "\n",
    "Housing.rename(columns = {0: 'bedrs', 1: 'bathrs', 2: 'price_sqr_meter'}, inplace=True)\n",
    "Housing.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>26618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>11964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>13850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>15189</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>19078</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>300 rows Ã— 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        0\n",
       "0       4\n",
       "1       3\n",
       "2       4\n",
       "3       1\n",
       "4       2\n",
       "..    ...\n",
       "95  26618\n",
       "96  11964\n",
       "97  13850\n",
       "98  15189\n",
       "99  19078\n",
       "\n",
       "[300 rows x 1 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 5. Create a one column DataFrame with the values of the 3 Series and assign it to 'bigcolumn'\n",
    "\n",
    "bigcolumn = pd.DataFrame(pd.concat([s1, s2, s3], axis=0))\n",
    "bigcolumn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    0\n",
       "95  3\n",
       "96  4\n",
       "97  3\n",
       "98  3\n",
       "99  1\n",
       "0   1\n",
       "1   3\n",
       "2   3\n",
       "3   3\n",
       "4   1"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 6. Ops it seems it is going only until index 99. Is it true?\n",
    "\n",
    "bigcolumn.iloc[95:105,]\n",
    "\n",
    "#Answer: True. Index is only until 99."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>95</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>96</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>97</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>98</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>99</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>100</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>101</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>102</th>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>103</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     index  0\n",
       "95      95  3\n",
       "96      96  4\n",
       "97      97  3\n",
       "98      98  3\n",
       "99      99  1\n",
       "100      0  1\n",
       "101      1  3\n",
       "102      2  3\n",
       "103      3  3\n",
       "104      4  1"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 7. Reindex the DataFrame so it goes from 0 to 299\n",
    "\n",
    "bigcolumn.reset_index(inplace = True) \n",
    "bigcolumn.iloc[95:105,]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 1. Import the necessary libraries\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Step 2. Import the dataset from this address https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/06_Stats/Wind_Stats/wind.data\n",
    "\n",
    "data=pd.read_csv('https://raw.githubusercontent.com/guipsamora/pandas_exercises/master/06_Stats/Wind_Stats/wind.data',sep=\"\\s+\",parse_dates=[[0,1,2]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Yr_Mo_Dy</th>\n",
       "      <th>RPT</th>\n",
       "      <th>VAL</th>\n",
       "      <th>ROS</th>\n",
       "      <th>KIL</th>\n",
       "      <th>SHA</th>\n",
       "      <th>BIR</th>\n",
       "      <th>DUB</th>\n",
       "      <th>CLA</th>\n",
       "      <th>MUL</th>\n",
       "      <th>CLO</th>\n",
       "      <th>BEL</th>\n",
       "      <th>MAL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2061-01-01</td>\n",
       "      <td>15.04</td>\n",
       "      <td>14.96</td>\n",
       "      <td>13.17</td>\n",
       "      <td>9.29</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.87</td>\n",
       "      <td>13.67</td>\n",
       "      <td>10.25</td>\n",
       "      <td>10.83</td>\n",
       "      <td>12.58</td>\n",
       "      <td>18.50</td>\n",
       "      <td>15.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2061-01-02</td>\n",
       "      <td>14.71</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.83</td>\n",
       "      <td>6.50</td>\n",
       "      <td>12.62</td>\n",
       "      <td>7.67</td>\n",
       "      <td>11.50</td>\n",
       "      <td>10.04</td>\n",
       "      <td>9.79</td>\n",
       "      <td>9.67</td>\n",
       "      <td>17.54</td>\n",
       "      <td>13.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2061-01-03</td>\n",
       "      <td>18.50</td>\n",
       "      <td>16.88</td>\n",
       "      <td>12.33</td>\n",
       "      <td>10.13</td>\n",
       "      <td>11.17</td>\n",
       "      <td>6.17</td>\n",
       "      <td>11.25</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.50</td>\n",
       "      <td>7.67</td>\n",
       "      <td>12.75</td>\n",
       "      <td>12.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2061-01-04</td>\n",
       "      <td>10.58</td>\n",
       "      <td>6.63</td>\n",
       "      <td>11.75</td>\n",
       "      <td>4.58</td>\n",
       "      <td>4.54</td>\n",
       "      <td>2.88</td>\n",
       "      <td>8.63</td>\n",
       "      <td>1.79</td>\n",
       "      <td>5.83</td>\n",
       "      <td>5.88</td>\n",
       "      <td>5.46</td>\n",
       "      <td>10.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2061-01-05</td>\n",
       "      <td>13.33</td>\n",
       "      <td>13.25</td>\n",
       "      <td>11.42</td>\n",
       "      <td>6.17</td>\n",
       "      <td>10.71</td>\n",
       "      <td>8.21</td>\n",
       "      <td>11.92</td>\n",
       "      <td>6.54</td>\n",
       "      <td>10.92</td>\n",
       "      <td>10.34</td>\n",
       "      <td>12.92</td>\n",
       "      <td>11.83</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Yr_Mo_Dy    RPT    VAL    ROS    KIL    SHA   BIR    DUB    CLA    MUL  \\\n",
       "0 2061-01-01  15.04  14.96  13.17   9.29    NaN  9.87  13.67  10.25  10.83   \n",
       "1 2061-01-02  14.71    NaN  10.83   6.50  12.62  7.67  11.50  10.04   9.79   \n",
       "2 2061-01-03  18.50  16.88  12.33  10.13  11.17  6.17  11.25    NaN   8.50   \n",
       "3 2061-01-04  10.58   6.63  11.75   4.58   4.54  2.88   8.63   1.79   5.83   \n",
       "4 2061-01-05  13.33  13.25  11.42   6.17  10.71  8.21  11.92   6.54  10.92   \n",
       "\n",
       "     CLO    BEL    MAL  \n",
       "0  12.58  18.50  15.04  \n",
       "1   9.67  17.54  13.83  \n",
       "2   7.67  12.75  12.71  \n",
       "3   5.88   5.46  10.88  \n",
       "4  10.34  12.92  11.83  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 3. Assign it to a variable called data and replace the first 3 columns by a proper datetime index\n",
    "\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Yr_Mo_Dy</th>\n",
       "      <th>RPT</th>\n",
       "      <th>VAL</th>\n",
       "      <th>ROS</th>\n",
       "      <th>KIL</th>\n",
       "      <th>SHA</th>\n",
       "      <th>BIR</th>\n",
       "      <th>DUB</th>\n",
       "      <th>CLA</th>\n",
       "      <th>MUL</th>\n",
       "      <th>CLO</th>\n",
       "      <th>BEL</th>\n",
       "      <th>MAL</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1961-01-01</td>\n",
       "      <td>15.04</td>\n",
       "      <td>14.96</td>\n",
       "      <td>13.17</td>\n",
       "      <td>9.29</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.87</td>\n",
       "      <td>13.67</td>\n",
       "      <td>10.25</td>\n",
       "      <td>10.83</td>\n",
       "      <td>12.58</td>\n",
       "      <td>18.50</td>\n",
       "      <td>15.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1961-01-02</td>\n",
       "      <td>14.71</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.83</td>\n",
       "      <td>6.50</td>\n",
       "      <td>12.62</td>\n",
       "      <td>7.67</td>\n",
       "      <td>11.50</td>\n",
       "      <td>10.04</td>\n",
       "      <td>9.79</td>\n",
       "      <td>9.67</td>\n",
       "      <td>17.54</td>\n",
       "      <td>13.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1961-01-03</td>\n",
       "      <td>18.50</td>\n",
       "      <td>16.88</td>\n",
       "      <td>12.33</td>\n",
       "      <td>10.13</td>\n",
       "      <td>11.17</td>\n",
       "      <td>6.17</td>\n",
       "      <td>11.25</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.50</td>\n",
       "      <td>7.67</td>\n",
       "      <td>12.75</td>\n",
       "      <td>12.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1961-01-04</td>\n",
       "      <td>10.58</td>\n",
       "      <td>6.63</td>\n",
       "      <td>11.75</td>\n",
       "      <td>4.58</td>\n",
       "      <td>4.54</td>\n",
       "      <td>2.88</td>\n",
       "      <td>8.63</td>\n",
       "      <td>1.79</td>\n",
       "      <td>5.83</td>\n",
       "      <td>5.88</td>\n",
       "      <td>5.46</td>\n",
       "      <td>10.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1961-01-05</td>\n",
       "      <td>13.33</td>\n",
       "      <td>13.25</td>\n",
       "      <td>11.42</td>\n",
       "      <td>6.17</td>\n",
       "      <td>10.71</td>\n",
       "      <td>8.21</td>\n",
       "      <td>11.92</td>\n",
       "      <td>6.54</td>\n",
       "      <td>10.92</td>\n",
       "      <td>10.34</td>\n",
       "      <td>12.92</td>\n",
       "      <td>11.83</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Yr_Mo_Dy    RPT    VAL    ROS    KIL    SHA   BIR    DUB    CLA    MUL  \\\n",
       "0  1961-01-01  15.04  14.96  13.17   9.29    NaN  9.87  13.67  10.25  10.83   \n",
       "1  1961-01-02  14.71    NaN  10.83   6.50  12.62  7.67  11.50  10.04   9.79   \n",
       "2  1961-01-03  18.50  16.88  12.33  10.13  11.17  6.17  11.25    NaN   8.50   \n",
       "3  1961-01-04  10.58   6.63  11.75   4.58   4.54  2.88   8.63   1.79   5.83   \n",
       "4  1961-01-05  13.33  13.25  11.42   6.17  10.71  8.21  11.92   6.54  10.92   \n",
       "\n",
       "     CLO    BEL    MAL  \n",
       "0  12.58  18.50  15.04  \n",
       "1   9.67  17.54  13.83  \n",
       "2   7.67  12.75  12.71  \n",
       "3   5.88   5.46  10.88  \n",
       "4  10.34  12.92  11.83  "
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 4. Year 2061? Do we really have data from this year? Create a function to fix itand apply it.\n",
    "\n",
    "def fix_century(x):\n",
    "  year=x.year-100 if x.year > 1979 else x.year\n",
    "  return datetime.date(year,x.month,x.day)\n",
    "data['Yr_Mo_Dy']=data['Yr_Mo_Dy'].apply(fix_century)\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RPT</th>\n",
       "      <th>VAL</th>\n",
       "      <th>ROS</th>\n",
       "      <th>KIL</th>\n",
       "      <th>SHA</th>\n",
       "      <th>BIR</th>\n",
       "      <th>DUB</th>\n",
       "      <th>CLA</th>\n",
       "      <th>MUL</th>\n",
       "      <th>CLO</th>\n",
       "      <th>BEL</th>\n",
       "      <th>MAL</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Yr_Mo_Dy</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1961-01-01</th>\n",
       "      <td>15.04</td>\n",
       "      <td>14.96</td>\n",
       "      <td>13.17</td>\n",
       "      <td>9.29</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.87</td>\n",
       "      <td>13.67</td>\n",
       "      <td>10.25</td>\n",
       "      <td>10.83</td>\n",
       "      <td>12.58</td>\n",
       "      <td>18.50</td>\n",
       "      <td>15.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-01-02</th>\n",
       "      <td>14.71</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10.83</td>\n",
       "      <td>6.50</td>\n",
       "      <td>12.62</td>\n",
       "      <td>7.67</td>\n",
       "      <td>11.50</td>\n",
       "      <td>10.04</td>\n",
       "      <td>9.79</td>\n",
       "      <td>9.67</td>\n",
       "      <td>17.54</td>\n",
       "      <td>13.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-01-03</th>\n",
       "      <td>18.50</td>\n",
       "      <td>16.88</td>\n",
       "      <td>12.33</td>\n",
       "      <td>10.13</td>\n",
       "      <td>11.17</td>\n",
       "      <td>6.17</td>\n",
       "      <td>11.25</td>\n",
       "      <td>NaN</td>\n",
       "      <td>8.50</td>\n",
       "      <td>7.67</td>\n",
       "      <td>12.75</td>\n",
       "      <td>12.71</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-01-04</th>\n",
       "      <td>10.58</td>\n",
       "      <td>6.63</td>\n",
       "      <td>11.75</td>\n",
       "      <td>4.58</td>\n",
       "      <td>4.54</td>\n",
       "      <td>2.88</td>\n",
       "      <td>8.63</td>\n",
       "      <td>1.79</td>\n",
       "      <td>5.83</td>\n",
       "      <td>5.88</td>\n",
       "      <td>5.46</td>\n",
       "      <td>10.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-01-05</th>\n",
       "      <td>13.33</td>\n",
       "      <td>13.25</td>\n",
       "      <td>11.42</td>\n",
       "      <td>6.17</td>\n",
       "      <td>10.71</td>\n",
       "      <td>8.21</td>\n",
       "      <td>11.92</td>\n",
       "      <td>6.54</td>\n",
       "      <td>10.92</td>\n",
       "      <td>10.34</td>\n",
       "      <td>12.92</td>\n",
       "      <td>11.83</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              RPT    VAL    ROS    KIL    SHA   BIR    DUB    CLA    MUL  \\\n",
       "Yr_Mo_Dy                                                                   \n",
       "1961-01-01  15.04  14.96  13.17   9.29    NaN  9.87  13.67  10.25  10.83   \n",
       "1961-01-02  14.71    NaN  10.83   6.50  12.62  7.67  11.50  10.04   9.79   \n",
       "1961-01-03  18.50  16.88  12.33  10.13  11.17  6.17  11.25    NaN   8.50   \n",
       "1961-01-04  10.58   6.63  11.75   4.58   4.54  2.88   8.63   1.79   5.83   \n",
       "1961-01-05  13.33  13.25  11.42   6.17  10.71  8.21  11.92   6.54  10.92   \n",
       "\n",
       "              CLO    BEL    MAL  \n",
       "Yr_Mo_Dy                         \n",
       "1961-01-01  12.58  18.50  15.04  \n",
       "1961-01-02   9.67  17.54  13.83  \n",
       "1961-01-03   7.67  12.75  12.71  \n",
       "1961-01-04   5.88   5.46  10.88  \n",
       "1961-01-05  10.34  12.92  11.83  "
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 5. Set the right dates as the index. Pay attention at the data type, it should be datetime64[ns].\n",
    "\n",
    "data['Yr_Mo_Dy']=pd.to_datetime(data['Yr_Mo_Dy'])\n",
    "data=data.set_index('Yr_Mo_Dy')\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RPT    6\n",
       "VAL    3\n",
       "ROS    2\n",
       "KIL    5\n",
       "SHA    2\n",
       "BIR    0\n",
       "DUB    3\n",
       "CLA    2\n",
       "MUL    3\n",
       "CLO    1\n",
       "BEL    0\n",
       "MAL    4\n",
       "dtype: int64"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 6. Compute how many values are missing for each location over the entire record.They should be ignored in all calculations below.\n",
    "\n",
    "\n",
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RPT    6568\n",
       "VAL    6571\n",
       "ROS    6572\n",
       "KIL    6569\n",
       "SHA    6572\n",
       "BIR    6574\n",
       "DUB    6571\n",
       "CLA    6572\n",
       "MUL    6571\n",
       "CLO    6573\n",
       "BEL    6574\n",
       "MAL    6570\n",
       "dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 7. Compute how many non-missing values there are in total.\n",
    "\n",
    "data.shape[0]-data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10.227982360836924"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 8. Calculate the mean windspeeds of the windspeeds over all the locations and all the times.\n",
    "\n",
    "data.mean().mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>RPT</th>\n",
       "      <td>0.67</td>\n",
       "      <td>35.80</td>\n",
       "      <td>12.362987</td>\n",
       "      <td>5.618413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>VAL</th>\n",
       "      <td>0.21</td>\n",
       "      <td>33.37</td>\n",
       "      <td>10.644314</td>\n",
       "      <td>5.267356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ROS</th>\n",
       "      <td>1.50</td>\n",
       "      <td>33.84</td>\n",
       "      <td>11.660526</td>\n",
       "      <td>5.008450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>KIL</th>\n",
       "      <td>0.00</td>\n",
       "      <td>28.46</td>\n",
       "      <td>6.306468</td>\n",
       "      <td>3.605811</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>SHA</th>\n",
       "      <td>0.13</td>\n",
       "      <td>37.54</td>\n",
       "      <td>10.455834</td>\n",
       "      <td>4.936125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BIR</th>\n",
       "      <td>0.00</td>\n",
       "      <td>26.16</td>\n",
       "      <td>7.092254</td>\n",
       "      <td>3.968683</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>DUB</th>\n",
       "      <td>0.00</td>\n",
       "      <td>30.37</td>\n",
       "      <td>9.797343</td>\n",
       "      <td>4.977555</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CLA</th>\n",
       "      <td>0.00</td>\n",
       "      <td>31.08</td>\n",
       "      <td>8.495053</td>\n",
       "      <td>4.499449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MUL</th>\n",
       "      <td>0.00</td>\n",
       "      <td>25.88</td>\n",
       "      <td>8.493590</td>\n",
       "      <td>4.166872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>CLO</th>\n",
       "      <td>0.04</td>\n",
       "      <td>28.21</td>\n",
       "      <td>8.707332</td>\n",
       "      <td>4.503954</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>BEL</th>\n",
       "      <td>0.13</td>\n",
       "      <td>42.38</td>\n",
       "      <td>13.121007</td>\n",
       "      <td>5.835037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>MAL</th>\n",
       "      <td>0.67</td>\n",
       "      <td>42.54</td>\n",
       "      <td>15.599079</td>\n",
       "      <td>6.699794</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      min    max       mean       std\n",
       "RPT  0.67  35.80  12.362987  5.618413\n",
       "VAL  0.21  33.37  10.644314  5.267356\n",
       "ROS  1.50  33.84  11.660526  5.008450\n",
       "KIL  0.00  28.46   6.306468  3.605811\n",
       "SHA  0.13  37.54  10.455834  4.936125\n",
       "BIR  0.00  26.16   7.092254  3.968683\n",
       "DUB  0.00  30.37   9.797343  4.977555\n",
       "CLA  0.00  31.08   8.495053  4.499449\n",
       "MUL  0.00  25.88   8.493590  4.166872\n",
       "CLO  0.04  28.21   8.707332  4.503954\n",
       "BEL  0.13  42.38  13.121007  5.835037\n",
       "MAL  0.67  42.54  15.599079  6.699794"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 9. Create a DataFrame called loc_stats and calculate the min, max and mean windspeeds and standard deviations of the windspeeds at each location over all the days.\n",
    "#A different set of numbers for each location.\n",
    "\n",
    "loc_stats=pd.DataFrame()\n",
    "loc_stats['min']=data.min()\n",
    "loc_stats['max']=data.max()\n",
    "loc_stats['mean']=data.mean()\n",
    "loc_stats['std']=data.std()\n",
    "loc_stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>min</th>\n",
       "      <th>max</th>\n",
       "      <th>mean</th>\n",
       "      <th>std</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Yr_Mo_Dy</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1961-01-01</th>\n",
       "      <td>9.29</td>\n",
       "      <td>18.50</td>\n",
       "      <td>13.018182</td>\n",
       "      <td>2.808875</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-01-02</th>\n",
       "      <td>6.50</td>\n",
       "      <td>17.54</td>\n",
       "      <td>11.336364</td>\n",
       "      <td>3.188994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-01-03</th>\n",
       "      <td>6.17</td>\n",
       "      <td>18.50</td>\n",
       "      <td>11.641818</td>\n",
       "      <td>3.681912</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-01-04</th>\n",
       "      <td>1.79</td>\n",
       "      <td>11.75</td>\n",
       "      <td>6.619167</td>\n",
       "      <td>3.198126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-01-05</th>\n",
       "      <td>6.17</td>\n",
       "      <td>13.33</td>\n",
       "      <td>10.630000</td>\n",
       "      <td>2.445356</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             min    max       mean       std\n",
       "Yr_Mo_Dy                                    \n",
       "1961-01-01  9.29  18.50  13.018182  2.808875\n",
       "1961-01-02  6.50  17.54  11.336364  3.188994\n",
       "1961-01-03  6.17  18.50  11.641818  3.681912\n",
       "1961-01-04  1.79  11.75   6.619167  3.198126\n",
       "1961-01-05  6.17  13.33  10.630000  2.445356"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 10. Create a DataFrame called day_stats and calculate the min, max and mean windspeed and standard deviations of the windspeeds across all the locations at each day.\n",
    "#A different set of numbers for each day.\n",
    "\n",
    "day_stats=pd.DataFrame()\n",
    "day_stats['min']=data.min(axis=1)\n",
    "day_stats['max']=data.max(axis=1)\n",
    "day_stats['mean']=data.mean(axis=1)\n",
    "day_stats['std']=data.std(axis=1)\n",
    "\n",
    "day_stats.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RPT    14.847325\n",
       "VAL    12.914560\n",
       "ROS    13.299624\n",
       "KIL     7.199498\n",
       "SHA    11.667734\n",
       "BIR     8.054839\n",
       "DUB    11.819355\n",
       "CLA     9.512047\n",
       "MUL     9.543208\n",
       "CLO    10.053566\n",
       "BEL    14.550520\n",
       "MAL    18.028763\n",
       "dtype: float64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 11. Find the average windspeed in January for each location. Treat January 1961 and January 1962 both as January.\n",
    "\n",
    "data['date']=data.index\n",
    "data['month']=data['date'].apply(lambda date:date.month)\n",
    "data['year']=data['date'].apply(lambda date:date.year)\n",
    "data['day']=data['date'].apply(lambda date:date.day)\n",
    "january_winds=data.query('month==1')\n",
    "january_winds\n",
    "january_winds.loc[:,'RPT':'MAL'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RPT</th>\n",
       "      <th>VAL</th>\n",
       "      <th>ROS</th>\n",
       "      <th>KIL</th>\n",
       "      <th>SHA</th>\n",
       "      <th>BIR</th>\n",
       "      <th>DUB</th>\n",
       "      <th>CLA</th>\n",
       "      <th>MUL</th>\n",
       "      <th>CLO</th>\n",
       "      <th>BEL</th>\n",
       "      <th>MAL</th>\n",
       "      <th>date</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>day</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Yr_Mo_Dy</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1961-01-01</th>\n",
       "      <td>15.04</td>\n",
       "      <td>14.96</td>\n",
       "      <td>13.17</td>\n",
       "      <td>9.29</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.87</td>\n",
       "      <td>13.67</td>\n",
       "      <td>10.25</td>\n",
       "      <td>10.83</td>\n",
       "      <td>12.58</td>\n",
       "      <td>18.50</td>\n",
       "      <td>15.04</td>\n",
       "      <td>1961-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1961</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1962-01-01</th>\n",
       "      <td>9.29</td>\n",
       "      <td>3.42</td>\n",
       "      <td>11.54</td>\n",
       "      <td>3.50</td>\n",
       "      <td>2.21</td>\n",
       "      <td>1.96</td>\n",
       "      <td>10.41</td>\n",
       "      <td>2.79</td>\n",
       "      <td>3.54</td>\n",
       "      <td>5.17</td>\n",
       "      <td>4.38</td>\n",
       "      <td>7.92</td>\n",
       "      <td>1962-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1962</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1963-01-01</th>\n",
       "      <td>15.59</td>\n",
       "      <td>13.62</td>\n",
       "      <td>19.79</td>\n",
       "      <td>8.38</td>\n",
       "      <td>12.25</td>\n",
       "      <td>10.00</td>\n",
       "      <td>23.45</td>\n",
       "      <td>15.71</td>\n",
       "      <td>13.59</td>\n",
       "      <td>14.37</td>\n",
       "      <td>17.58</td>\n",
       "      <td>34.13</td>\n",
       "      <td>1963-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1963</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1964-01-01</th>\n",
       "      <td>25.80</td>\n",
       "      <td>22.13</td>\n",
       "      <td>18.21</td>\n",
       "      <td>13.25</td>\n",
       "      <td>21.29</td>\n",
       "      <td>14.79</td>\n",
       "      <td>14.12</td>\n",
       "      <td>19.58</td>\n",
       "      <td>13.25</td>\n",
       "      <td>16.75</td>\n",
       "      <td>28.96</td>\n",
       "      <td>21.00</td>\n",
       "      <td>1964-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1964</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1965-01-01</th>\n",
       "      <td>9.54</td>\n",
       "      <td>11.92</td>\n",
       "      <td>9.00</td>\n",
       "      <td>4.38</td>\n",
       "      <td>6.08</td>\n",
       "      <td>5.21</td>\n",
       "      <td>10.25</td>\n",
       "      <td>6.08</td>\n",
       "      <td>5.71</td>\n",
       "      <td>8.63</td>\n",
       "      <td>12.04</td>\n",
       "      <td>17.41</td>\n",
       "      <td>1965-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1965</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1966-01-01</th>\n",
       "      <td>22.04</td>\n",
       "      <td>21.50</td>\n",
       "      <td>17.08</td>\n",
       "      <td>12.75</td>\n",
       "      <td>22.17</td>\n",
       "      <td>15.59</td>\n",
       "      <td>21.79</td>\n",
       "      <td>18.12</td>\n",
       "      <td>16.66</td>\n",
       "      <td>17.83</td>\n",
       "      <td>28.33</td>\n",
       "      <td>23.79</td>\n",
       "      <td>1966-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1966</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1967-01-01</th>\n",
       "      <td>6.46</td>\n",
       "      <td>4.46</td>\n",
       "      <td>6.50</td>\n",
       "      <td>3.21</td>\n",
       "      <td>6.67</td>\n",
       "      <td>3.79</td>\n",
       "      <td>11.38</td>\n",
       "      <td>3.83</td>\n",
       "      <td>7.71</td>\n",
       "      <td>9.08</td>\n",
       "      <td>10.67</td>\n",
       "      <td>20.91</td>\n",
       "      <td>1967-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1967</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1968-01-01</th>\n",
       "      <td>30.04</td>\n",
       "      <td>17.88</td>\n",
       "      <td>16.25</td>\n",
       "      <td>16.25</td>\n",
       "      <td>21.79</td>\n",
       "      <td>12.54</td>\n",
       "      <td>18.16</td>\n",
       "      <td>16.62</td>\n",
       "      <td>18.75</td>\n",
       "      <td>17.62</td>\n",
       "      <td>22.25</td>\n",
       "      <td>27.29</td>\n",
       "      <td>1968-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1968</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1969-01-01</th>\n",
       "      <td>6.13</td>\n",
       "      <td>1.63</td>\n",
       "      <td>5.41</td>\n",
       "      <td>1.08</td>\n",
       "      <td>2.54</td>\n",
       "      <td>1.00</td>\n",
       "      <td>8.50</td>\n",
       "      <td>2.42</td>\n",
       "      <td>4.58</td>\n",
       "      <td>6.34</td>\n",
       "      <td>9.17</td>\n",
       "      <td>16.71</td>\n",
       "      <td>1969-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1969</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1970-01-01</th>\n",
       "      <td>9.59</td>\n",
       "      <td>2.96</td>\n",
       "      <td>11.79</td>\n",
       "      <td>3.42</td>\n",
       "      <td>6.13</td>\n",
       "      <td>4.08</td>\n",
       "      <td>9.00</td>\n",
       "      <td>4.46</td>\n",
       "      <td>7.29</td>\n",
       "      <td>3.50</td>\n",
       "      <td>7.33</td>\n",
       "      <td>13.00</td>\n",
       "      <td>1970-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1970</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1971-01-01</th>\n",
       "      <td>3.71</td>\n",
       "      <td>0.79</td>\n",
       "      <td>4.71</td>\n",
       "      <td>0.17</td>\n",
       "      <td>1.42</td>\n",
       "      <td>1.04</td>\n",
       "      <td>4.63</td>\n",
       "      <td>0.75</td>\n",
       "      <td>1.54</td>\n",
       "      <td>1.08</td>\n",
       "      <td>4.21</td>\n",
       "      <td>9.54</td>\n",
       "      <td>1971-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1971</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1972-01-01</th>\n",
       "      <td>9.29</td>\n",
       "      <td>3.63</td>\n",
       "      <td>14.54</td>\n",
       "      <td>4.25</td>\n",
       "      <td>6.75</td>\n",
       "      <td>4.42</td>\n",
       "      <td>13.00</td>\n",
       "      <td>5.33</td>\n",
       "      <td>10.04</td>\n",
       "      <td>8.54</td>\n",
       "      <td>8.71</td>\n",
       "      <td>19.17</td>\n",
       "      <td>1972-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1972</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1973-01-01</th>\n",
       "      <td>16.50</td>\n",
       "      <td>15.92</td>\n",
       "      <td>14.62</td>\n",
       "      <td>7.41</td>\n",
       "      <td>8.29</td>\n",
       "      <td>11.21</td>\n",
       "      <td>13.54</td>\n",
       "      <td>7.79</td>\n",
       "      <td>10.46</td>\n",
       "      <td>10.79</td>\n",
       "      <td>13.37</td>\n",
       "      <td>9.71</td>\n",
       "      <td>1973-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1973</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1974-01-01</th>\n",
       "      <td>23.21</td>\n",
       "      <td>16.54</td>\n",
       "      <td>16.08</td>\n",
       "      <td>9.75</td>\n",
       "      <td>15.83</td>\n",
       "      <td>11.46</td>\n",
       "      <td>9.54</td>\n",
       "      <td>13.54</td>\n",
       "      <td>13.83</td>\n",
       "      <td>16.66</td>\n",
       "      <td>17.21</td>\n",
       "      <td>25.29</td>\n",
       "      <td>1974-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1974</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1975-01-01</th>\n",
       "      <td>14.04</td>\n",
       "      <td>13.54</td>\n",
       "      <td>11.29</td>\n",
       "      <td>5.46</td>\n",
       "      <td>12.58</td>\n",
       "      <td>5.58</td>\n",
       "      <td>8.12</td>\n",
       "      <td>8.96</td>\n",
       "      <td>9.29</td>\n",
       "      <td>5.17</td>\n",
       "      <td>7.71</td>\n",
       "      <td>11.63</td>\n",
       "      <td>1975-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1975</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1976-01-01</th>\n",
       "      <td>18.34</td>\n",
       "      <td>17.67</td>\n",
       "      <td>14.83</td>\n",
       "      <td>8.00</td>\n",
       "      <td>16.62</td>\n",
       "      <td>10.13</td>\n",
       "      <td>13.17</td>\n",
       "      <td>9.04</td>\n",
       "      <td>13.13</td>\n",
       "      <td>5.75</td>\n",
       "      <td>11.38</td>\n",
       "      <td>14.96</td>\n",
       "      <td>1976-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1976</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1977-01-01</th>\n",
       "      <td>20.04</td>\n",
       "      <td>11.92</td>\n",
       "      <td>20.25</td>\n",
       "      <td>9.13</td>\n",
       "      <td>9.29</td>\n",
       "      <td>8.04</td>\n",
       "      <td>10.75</td>\n",
       "      <td>5.88</td>\n",
       "      <td>9.00</td>\n",
       "      <td>9.00</td>\n",
       "      <td>14.88</td>\n",
       "      <td>25.70</td>\n",
       "      <td>1977-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1977</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1978-01-01</th>\n",
       "      <td>8.33</td>\n",
       "      <td>7.12</td>\n",
       "      <td>7.71</td>\n",
       "      <td>3.54</td>\n",
       "      <td>8.50</td>\n",
       "      <td>7.50</td>\n",
       "      <td>14.71</td>\n",
       "      <td>10.00</td>\n",
       "      <td>11.83</td>\n",
       "      <td>10.00</td>\n",
       "      <td>15.09</td>\n",
       "      <td>20.46</td>\n",
       "      <td>1978-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1978</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              RPT    VAL    ROS    KIL    SHA    BIR    DUB    CLA    MUL  \\\n",
       "Yr_Mo_Dy                                                                    \n",
       "1961-01-01  15.04  14.96  13.17   9.29    NaN   9.87  13.67  10.25  10.83   \n",
       "1962-01-01   9.29   3.42  11.54   3.50   2.21   1.96  10.41   2.79   3.54   \n",
       "1963-01-01  15.59  13.62  19.79   8.38  12.25  10.00  23.45  15.71  13.59   \n",
       "1964-01-01  25.80  22.13  18.21  13.25  21.29  14.79  14.12  19.58  13.25   \n",
       "1965-01-01   9.54  11.92   9.00   4.38   6.08   5.21  10.25   6.08   5.71   \n",
       "1966-01-01  22.04  21.50  17.08  12.75  22.17  15.59  21.79  18.12  16.66   \n",
       "1967-01-01   6.46   4.46   6.50   3.21   6.67   3.79  11.38   3.83   7.71   \n",
       "1968-01-01  30.04  17.88  16.25  16.25  21.79  12.54  18.16  16.62  18.75   \n",
       "1969-01-01   6.13   1.63   5.41   1.08   2.54   1.00   8.50   2.42   4.58   \n",
       "1970-01-01   9.59   2.96  11.79   3.42   6.13   4.08   9.00   4.46   7.29   \n",
       "1971-01-01   3.71   0.79   4.71   0.17   1.42   1.04   4.63   0.75   1.54   \n",
       "1972-01-01   9.29   3.63  14.54   4.25   6.75   4.42  13.00   5.33  10.04   \n",
       "1973-01-01  16.50  15.92  14.62   7.41   8.29  11.21  13.54   7.79  10.46   \n",
       "1974-01-01  23.21  16.54  16.08   9.75  15.83  11.46   9.54  13.54  13.83   \n",
       "1975-01-01  14.04  13.54  11.29   5.46  12.58   5.58   8.12   8.96   9.29   \n",
       "1976-01-01  18.34  17.67  14.83   8.00  16.62  10.13  13.17   9.04  13.13   \n",
       "1977-01-01  20.04  11.92  20.25   9.13   9.29   8.04  10.75   5.88   9.00   \n",
       "1978-01-01   8.33   7.12   7.71   3.54   8.50   7.50  14.71  10.00  11.83   \n",
       "\n",
       "              CLO    BEL    MAL       date  month  year  day  \n",
       "Yr_Mo_Dy                                                      \n",
       "1961-01-01  12.58  18.50  15.04 1961-01-01      1  1961    1  \n",
       "1962-01-01   5.17   4.38   7.92 1962-01-01      1  1962    1  \n",
       "1963-01-01  14.37  17.58  34.13 1963-01-01      1  1963    1  \n",
       "1964-01-01  16.75  28.96  21.00 1964-01-01      1  1964    1  \n",
       "1965-01-01   8.63  12.04  17.41 1965-01-01      1  1965    1  \n",
       "1966-01-01  17.83  28.33  23.79 1966-01-01      1  1966    1  \n",
       "1967-01-01   9.08  10.67  20.91 1967-01-01      1  1967    1  \n",
       "1968-01-01  17.62  22.25  27.29 1968-01-01      1  1968    1  \n",
       "1969-01-01   6.34   9.17  16.71 1969-01-01      1  1969    1  \n",
       "1970-01-01   3.50   7.33  13.00 1970-01-01      1  1970    1  \n",
       "1971-01-01   1.08   4.21   9.54 1971-01-01      1  1971    1  \n",
       "1972-01-01   8.54   8.71  19.17 1972-01-01      1  1972    1  \n",
       "1973-01-01  10.79  13.37   9.71 1973-01-01      1  1973    1  \n",
       "1974-01-01  16.66  17.21  25.29 1974-01-01      1  1974    1  \n",
       "1975-01-01   5.17   7.71  11.63 1975-01-01      1  1975    1  \n",
       "1976-01-01   5.75  11.38  14.96 1976-01-01      1  1976    1  \n",
       "1977-01-01   9.00  14.88  25.70 1977-01-01      1  1977    1  \n",
       "1978-01-01  10.00  15.09  20.46 1978-01-01      1  1978    1  "
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 12. Downsample the record to a yearly frequency for each location.\n",
    "\n",
    "data.query('month == 1 and day == 1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RPT</th>\n",
       "      <th>VAL</th>\n",
       "      <th>ROS</th>\n",
       "      <th>KIL</th>\n",
       "      <th>SHA</th>\n",
       "      <th>BIR</th>\n",
       "      <th>DUB</th>\n",
       "      <th>CLA</th>\n",
       "      <th>MUL</th>\n",
       "      <th>CLO</th>\n",
       "      <th>BEL</th>\n",
       "      <th>MAL</th>\n",
       "      <th>date</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>day</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Yr_Mo_Dy</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1961-01-01</th>\n",
       "      <td>15.04</td>\n",
       "      <td>14.96</td>\n",
       "      <td>13.17</td>\n",
       "      <td>9.29</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.87</td>\n",
       "      <td>13.67</td>\n",
       "      <td>10.25</td>\n",
       "      <td>10.83</td>\n",
       "      <td>12.58</td>\n",
       "      <td>18.50</td>\n",
       "      <td>15.04</td>\n",
       "      <td>1961-01-01</td>\n",
       "      <td>1</td>\n",
       "      <td>1961</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-02-01</th>\n",
       "      <td>14.25</td>\n",
       "      <td>15.12</td>\n",
       "      <td>9.04</td>\n",
       "      <td>5.88</td>\n",
       "      <td>12.08</td>\n",
       "      <td>7.17</td>\n",
       "      <td>10.17</td>\n",
       "      <td>3.63</td>\n",
       "      <td>6.50</td>\n",
       "      <td>5.50</td>\n",
       "      <td>9.17</td>\n",
       "      <td>8.00</td>\n",
       "      <td>1961-02-01</td>\n",
       "      <td>2</td>\n",
       "      <td>1961</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-03-01</th>\n",
       "      <td>12.67</td>\n",
       "      <td>13.13</td>\n",
       "      <td>11.79</td>\n",
       "      <td>6.42</td>\n",
       "      <td>9.79</td>\n",
       "      <td>8.54</td>\n",
       "      <td>10.25</td>\n",
       "      <td>13.29</td>\n",
       "      <td>NaN</td>\n",
       "      <td>12.21</td>\n",
       "      <td>20.62</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1961-03-01</td>\n",
       "      <td>3</td>\n",
       "      <td>1961</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-04-01</th>\n",
       "      <td>8.38</td>\n",
       "      <td>6.34</td>\n",
       "      <td>8.33</td>\n",
       "      <td>6.75</td>\n",
       "      <td>9.33</td>\n",
       "      <td>9.54</td>\n",
       "      <td>11.67</td>\n",
       "      <td>8.21</td>\n",
       "      <td>11.21</td>\n",
       "      <td>6.46</td>\n",
       "      <td>11.96</td>\n",
       "      <td>7.17</td>\n",
       "      <td>1961-04-01</td>\n",
       "      <td>4</td>\n",
       "      <td>1961</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-05-01</th>\n",
       "      <td>15.87</td>\n",
       "      <td>13.88</td>\n",
       "      <td>15.37</td>\n",
       "      <td>9.79</td>\n",
       "      <td>13.46</td>\n",
       "      <td>10.17</td>\n",
       "      <td>9.96</td>\n",
       "      <td>14.04</td>\n",
       "      <td>9.75</td>\n",
       "      <td>9.92</td>\n",
       "      <td>18.63</td>\n",
       "      <td>11.12</td>\n",
       "      <td>1961-05-01</td>\n",
       "      <td>5</td>\n",
       "      <td>1961</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1978-08-01</th>\n",
       "      <td>19.33</td>\n",
       "      <td>15.09</td>\n",
       "      <td>20.17</td>\n",
       "      <td>8.83</td>\n",
       "      <td>12.62</td>\n",
       "      <td>10.41</td>\n",
       "      <td>9.33</td>\n",
       "      <td>12.33</td>\n",
       "      <td>9.50</td>\n",
       "      <td>9.92</td>\n",
       "      <td>15.75</td>\n",
       "      <td>18.00</td>\n",
       "      <td>1978-08-01</td>\n",
       "      <td>8</td>\n",
       "      <td>1978</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1978-09-01</th>\n",
       "      <td>8.42</td>\n",
       "      <td>6.13</td>\n",
       "      <td>9.87</td>\n",
       "      <td>5.25</td>\n",
       "      <td>3.21</td>\n",
       "      <td>5.71</td>\n",
       "      <td>7.25</td>\n",
       "      <td>3.50</td>\n",
       "      <td>7.33</td>\n",
       "      <td>6.50</td>\n",
       "      <td>7.62</td>\n",
       "      <td>15.96</td>\n",
       "      <td>1978-09-01</td>\n",
       "      <td>9</td>\n",
       "      <td>1978</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1978-10-01</th>\n",
       "      <td>9.50</td>\n",
       "      <td>6.83</td>\n",
       "      <td>10.50</td>\n",
       "      <td>3.88</td>\n",
       "      <td>6.13</td>\n",
       "      <td>4.58</td>\n",
       "      <td>4.21</td>\n",
       "      <td>6.50</td>\n",
       "      <td>6.38</td>\n",
       "      <td>6.54</td>\n",
       "      <td>10.63</td>\n",
       "      <td>14.09</td>\n",
       "      <td>1978-10-01</td>\n",
       "      <td>10</td>\n",
       "      <td>1978</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1978-11-01</th>\n",
       "      <td>13.59</td>\n",
       "      <td>16.75</td>\n",
       "      <td>11.25</td>\n",
       "      <td>7.08</td>\n",
       "      <td>11.04</td>\n",
       "      <td>8.33</td>\n",
       "      <td>8.17</td>\n",
       "      <td>11.29</td>\n",
       "      <td>10.75</td>\n",
       "      <td>11.25</td>\n",
       "      <td>23.13</td>\n",
       "      <td>25.00</td>\n",
       "      <td>1978-11-01</td>\n",
       "      <td>11</td>\n",
       "      <td>1978</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1978-12-01</th>\n",
       "      <td>21.29</td>\n",
       "      <td>16.29</td>\n",
       "      <td>24.04</td>\n",
       "      <td>12.79</td>\n",
       "      <td>18.21</td>\n",
       "      <td>19.29</td>\n",
       "      <td>21.54</td>\n",
       "      <td>17.21</td>\n",
       "      <td>16.71</td>\n",
       "      <td>17.83</td>\n",
       "      <td>17.75</td>\n",
       "      <td>25.70</td>\n",
       "      <td>1978-12-01</td>\n",
       "      <td>12</td>\n",
       "      <td>1978</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>216 rows Ã— 16 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              RPT    VAL    ROS    KIL    SHA    BIR    DUB    CLA    MUL  \\\n",
       "Yr_Mo_Dy                                                                    \n",
       "1961-01-01  15.04  14.96  13.17   9.29    NaN   9.87  13.67  10.25  10.83   \n",
       "1961-02-01  14.25  15.12   9.04   5.88  12.08   7.17  10.17   3.63   6.50   \n",
       "1961-03-01  12.67  13.13  11.79   6.42   9.79   8.54  10.25  13.29    NaN   \n",
       "1961-04-01   8.38   6.34   8.33   6.75   9.33   9.54  11.67   8.21  11.21   \n",
       "1961-05-01  15.87  13.88  15.37   9.79  13.46  10.17   9.96  14.04   9.75   \n",
       "...           ...    ...    ...    ...    ...    ...    ...    ...    ...   \n",
       "1978-08-01  19.33  15.09  20.17   8.83  12.62  10.41   9.33  12.33   9.50   \n",
       "1978-09-01   8.42   6.13   9.87   5.25   3.21   5.71   7.25   3.50   7.33   \n",
       "1978-10-01   9.50   6.83  10.50   3.88   6.13   4.58   4.21   6.50   6.38   \n",
       "1978-11-01  13.59  16.75  11.25   7.08  11.04   8.33   8.17  11.29  10.75   \n",
       "1978-12-01  21.29  16.29  24.04  12.79  18.21  19.29  21.54  17.21  16.71   \n",
       "\n",
       "              CLO    BEL    MAL       date  month  year  day  \n",
       "Yr_Mo_Dy                                                      \n",
       "1961-01-01  12.58  18.50  15.04 1961-01-01      1  1961    1  \n",
       "1961-02-01   5.50   9.17   8.00 1961-02-01      2  1961    1  \n",
       "1961-03-01  12.21  20.62    NaN 1961-03-01      3  1961    1  \n",
       "1961-04-01   6.46  11.96   7.17 1961-04-01      4  1961    1  \n",
       "1961-05-01   9.92  18.63  11.12 1961-05-01      5  1961    1  \n",
       "...           ...    ...    ...        ...    ...   ...  ...  \n",
       "1978-08-01   9.92  15.75  18.00 1978-08-01      8  1978    1  \n",
       "1978-09-01   6.50   7.62  15.96 1978-09-01      9  1978    1  \n",
       "1978-10-01   6.54  10.63  14.09 1978-10-01     10  1978    1  \n",
       "1978-11-01  11.25  23.13  25.00 1978-11-01     11  1978    1  \n",
       "1978-12-01  17.83  17.75  25.70 1978-12-01     12  1978    1  \n",
       "\n",
       "[216 rows x 16 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 13. Downsample the record to a monthly frequency for each location.\n",
    "\n",
    "data.query('day == 1')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "ename": "UndefinedVariableError",
     "evalue": "name 'date' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\computation\\scope.py\u001b[0m in \u001b[0;36mresolve\u001b[1;34m(self, key, is_local)\u001b[0m\n\u001b[0;32m    186\u001b[0m             \u001b[1;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mhas_resolvers\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 187\u001b[1;33m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mresolvers\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    188\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\collections\\__init__.py\u001b[0m in \u001b[0;36m__getitem__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m    897\u001b[0m                 \u001b[1;32mpass\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 898\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__missing__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m            \u001b[1;31m# support subclasses that define __missing__\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    899\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\collections\\__init__.py\u001b[0m in \u001b[0;36m__missing__\u001b[1;34m(self, key)\u001b[0m\n\u001b[0;32m    889\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m__missing__\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 890\u001b[1;33m         \u001b[1;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    891\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'date'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\computation\\scope.py\u001b[0m in \u001b[0;36mresolve\u001b[1;34m(self, key, is_local)\u001b[0m\n\u001b[0;32m    197\u001b[0m                 \u001b[1;31m# e.g., df[df > 0]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 198\u001b[1;33m                 \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtemps\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    199\u001b[0m             \u001b[1;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 'date'",
      "\nDuring handling of the above exception, another exception occurred:\n",
      "\u001b[1;31mUndefinedVariableError\u001b[0m                    Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-64-94663b82557d>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m#Step 14. Downsample the record to a weekly frequency for each location\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mdata\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mquery\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'date == 1'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36mquery\u001b[1;34m(self, expr, inplace, **kwargs)\u001b[0m\n\u001b[0;32m   3229\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"level\"\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"level\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m+\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3230\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"target\"\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3231\u001b[1;33m         \u001b[0mres\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0meval\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mexpr\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3232\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3233\u001b[0m         \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\frame.py\u001b[0m in \u001b[0;36meval\u001b[1;34m(self, expr, inplace, **kwargs)\u001b[0m\n\u001b[0;32m   3344\u001b[0m         \u001b[0mkwargs\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"resolvers\"\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"resolvers\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0mtuple\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mresolvers\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3345\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 3346\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0m_eval\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mexpr\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0minplace\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0minplace\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   3347\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   3348\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mselect_dtypes\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0minclude\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mexclude\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m->\u001b[0m \u001b[1;34m\"DataFrame\"\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\computation\\eval.py\u001b[0m in \u001b[0;36meval\u001b[1;34m(expr, parser, engine, truediv, local_dict, global_dict, resolvers, level, target, inplace)\u001b[0m\n\u001b[0;32m    330\u001b[0m         )\n\u001b[0;32m    331\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 332\u001b[1;33m         \u001b[0mparsed_expr\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mExpr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mexpr\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mengine\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mparser\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mparser\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0menv\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0menv\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    333\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    334\u001b[0m         \u001b[1;31m# construct the engine and evaluate the parsed expression\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\computation\\expr.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, expr, engine, parser, env, level)\u001b[0m\n\u001b[0;32m    762\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mparser\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mparser\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    763\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_visitor\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0m_parsers\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mparser\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0menv\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mparser\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 764\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mterms\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mparse\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    765\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    766\u001b[0m     \u001b[1;33m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\computation\\expr.py\u001b[0m in \u001b[0;36mparse\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    779\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mparse\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    780\u001b[0m         \u001b[1;34m\"\"\"Parse an expression\"\"\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 781\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_visitor\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvisit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mexpr\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    782\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    783\u001b[0m     \u001b[1;33m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\computation\\expr.py\u001b[0m in \u001b[0;36mvisit\u001b[1;34m(self, node, **kwargs)\u001b[0m\n\u001b[0;32m    373\u001b[0m         \u001b[0mmethod\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"visit_\"\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0mtype\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    374\u001b[0m         \u001b[0mvisitor\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 375\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mvisitor\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    376\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    377\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mvisit_Module\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\computation\\expr.py\u001b[0m in \u001b[0;36mvisit_Module\u001b[1;34m(self, node, **kwargs)\u001b[0m\n\u001b[0;32m    379\u001b[0m             \u001b[1;32mraise\u001b[0m \u001b[0mSyntaxError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"only a single expression is allowed\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    380\u001b[0m         \u001b[0mexpr\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnode\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mbody\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 381\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvisit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mexpr\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    382\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    383\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mvisit_Expr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\computation\\expr.py\u001b[0m in \u001b[0;36mvisit\u001b[1;34m(self, node, **kwargs)\u001b[0m\n\u001b[0;32m    373\u001b[0m         \u001b[0mmethod\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"visit_\"\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0mtype\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    374\u001b[0m         \u001b[0mvisitor\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 375\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mvisitor\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    376\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    377\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mvisit_Module\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\computation\\expr.py\u001b[0m in \u001b[0;36mvisit_Expr\u001b[1;34m(self, node, **kwargs)\u001b[0m\n\u001b[0;32m    382\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    383\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mvisit_Expr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 384\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvisit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvalue\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    385\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    386\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_rewrite_membership_op\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mleft\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mright\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\computation\\expr.py\u001b[0m in \u001b[0;36mvisit\u001b[1;34m(self, node, **kwargs)\u001b[0m\n\u001b[0;32m    373\u001b[0m         \u001b[0mmethod\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"visit_\"\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0mtype\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    374\u001b[0m         \u001b[0mvisitor\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 375\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mvisitor\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    376\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    377\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mvisit_Module\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\computation\\expr.py\u001b[0m in \u001b[0;36mvisit_Compare\u001b[1;34m(self, node, **kwargs)\u001b[0m\n\u001b[0;32m    674\u001b[0m             \u001b[0mop\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtranslate_In\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mops\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    675\u001b[0m             \u001b[0mbinop\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mast\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mBinOp\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mop\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mop\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mleft\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mnode\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mleft\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mright\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mcomps\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 676\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvisit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mbinop\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    677\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    678\u001b[0m         \u001b[1;31m# recursive case: we have a chained comparison, a CMP b CMP c, etc.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\computation\\expr.py\u001b[0m in \u001b[0;36mvisit\u001b[1;34m(self, node, **kwargs)\u001b[0m\n\u001b[0;32m    373\u001b[0m         \u001b[0mmethod\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"visit_\"\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0mtype\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    374\u001b[0m         \u001b[0mvisitor\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 375\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mvisitor\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    376\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    377\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mvisit_Module\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\computation\\expr.py\u001b[0m in \u001b[0;36mvisit_BinOp\u001b[1;34m(self, node, **kwargs)\u001b[0m\n\u001b[0;32m    495\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    496\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mvisit_BinOp\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 497\u001b[1;33m         \u001b[0mop\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mop_class\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mleft\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mright\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_maybe_transform_eq_ne\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    498\u001b[0m         \u001b[0mleft\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mright\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_maybe_downcast_constants\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mleft\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mright\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    499\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_maybe_evaluate_binop\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mop\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mop_class\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mleft\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mright\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\computation\\expr.py\u001b[0m in \u001b[0;36m_maybe_transform_eq_ne\u001b[1;34m(self, node, left, right)\u001b[0m\n\u001b[0;32m    414\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_maybe_transform_eq_ne\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mleft\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mright\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    415\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mleft\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 416\u001b[1;33m             \u001b[0mleft\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvisit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mleft\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mside\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\"left\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    417\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mright\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    418\u001b[0m             \u001b[0mright\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mvisit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mright\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mside\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\"right\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\computation\\expr.py\u001b[0m in \u001b[0;36mvisit\u001b[1;34m(self, node, **kwargs)\u001b[0m\n\u001b[0;32m    373\u001b[0m         \u001b[0mmethod\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"visit_\"\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0mtype\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    374\u001b[0m         \u001b[0mvisitor\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 375\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mvisitor\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    376\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    377\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mvisit_Module\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\computation\\expr.py\u001b[0m in \u001b[0;36mvisit_Name\u001b[1;34m(self, node, **kwargs)\u001b[0m\n\u001b[0;32m    508\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    509\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mvisit_Name\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 510\u001b[1;33m         \u001b[1;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mterm_type\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnode\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mid\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0menv\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    511\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    512\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mvisit_NameConstant\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnode\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;33m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\computation\\ops.py\u001b[0m in \u001b[0;36m__init__\u001b[1;34m(self, name, env, side, encoding)\u001b[0m\n\u001b[0;32m     80\u001b[0m         \u001b[0mtname\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     81\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mis_local\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mtname\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0m_LOCAL_TAG\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mor\u001b[0m \u001b[0mtname\u001b[0m \u001b[1;32min\u001b[0m \u001b[0m_DEFAULT_GLOBALS\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 82\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_value\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_resolve_name\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     83\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mencoding\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mencoding\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     84\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\computation\\ops.py\u001b[0m in \u001b[0;36m_resolve_name\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m     97\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     98\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0m_resolve_name\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 99\u001b[1;33m         \u001b[0mres\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0menv\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mresolve\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mlocal_name\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mis_local\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mis_local\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    100\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mres\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    101\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m~\\anaconda3\\lib\\site-packages\\pandas\\core\\computation\\scope.py\u001b[0m in \u001b[0;36mresolve\u001b[1;34m(self, key, is_local)\u001b[0m\n\u001b[0;32m    201\u001b[0m                 \u001b[1;32mfrom\u001b[0m \u001b[0mpandas\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcomputation\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mops\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mUndefinedVariableError\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    202\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 203\u001b[1;33m                 \u001b[1;32mraise\u001b[0m \u001b[0mUndefinedVariableError\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mis_local\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    204\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    205\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mswapkey\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mold_key\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnew_key\u001b[0m\u001b[1;33m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mnew_value\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mUndefinedVariableError\u001b[0m: name 'date' is not defined"
     ]
    }
   ],
   "source": [
    "#Step 14. Downsample the record to a weekly frequency for each location\n",
    "\n",
    "data.query('date == 1')\n",
    "weekly_summary['speed'] = df.speed.resample('W').mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RPT</th>\n",
       "      <th>VAL</th>\n",
       "      <th>ROS</th>\n",
       "      <th>KIL</th>\n",
       "      <th>SHA</th>\n",
       "      <th>BIR</th>\n",
       "      <th>DUB</th>\n",
       "      <th>CLA</th>\n",
       "      <th>MUL</th>\n",
       "      <th>CLO</th>\n",
       "      <th>BEL</th>\n",
       "      <th>MAL</th>\n",
       "      <th>month</th>\n",
       "      <th>year</th>\n",
       "      <th>day</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Yr_Mo_Dy</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1961-01-01</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-01-08</th>\n",
       "      <td>2.631321</td>\n",
       "      <td>3.949525</td>\n",
       "      <td>1.604761</td>\n",
       "      <td>1.810743</td>\n",
       "      <td>3.251660</td>\n",
       "      <td>2.059546</td>\n",
       "      <td>1.872222</td>\n",
       "      <td>3.098404</td>\n",
       "      <td>1.722255</td>\n",
       "      <td>1.704941</td>\n",
       "      <td>4.349139</td>\n",
       "      <td>1.773062</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-01-15</th>\n",
       "      <td>3.555392</td>\n",
       "      <td>3.148945</td>\n",
       "      <td>5.034959</td>\n",
       "      <td>3.549559</td>\n",
       "      <td>3.471726</td>\n",
       "      <td>3.251039</td>\n",
       "      <td>4.709309</td>\n",
       "      <td>3.936894</td>\n",
       "      <td>3.500975</td>\n",
       "      <td>4.084293</td>\n",
       "      <td>5.552215</td>\n",
       "      <td>4.692355</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-01-22</th>\n",
       "      <td>5.337402</td>\n",
       "      <td>3.837785</td>\n",
       "      <td>5.086229</td>\n",
       "      <td>6.245541</td>\n",
       "      <td>3.612875</td>\n",
       "      <td>3.453432</td>\n",
       "      <td>5.166300</td>\n",
       "      <td>3.164990</td>\n",
       "      <td>4.169112</td>\n",
       "      <td>4.783952</td>\n",
       "      <td>3.626584</td>\n",
       "      <td>4.237239</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-01-29</th>\n",
       "      <td>4.619061</td>\n",
       "      <td>5.170224</td>\n",
       "      <td>4.665843</td>\n",
       "      <td>4.301325</td>\n",
       "      <td>4.858116</td>\n",
       "      <td>3.749415</td>\n",
       "      <td>4.508449</td>\n",
       "      <td>4.436222</td>\n",
       "      <td>4.902057</td>\n",
       "      <td>3.713368</td>\n",
       "      <td>5.210726</td>\n",
       "      <td>3.874721</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-02-05</th>\n",
       "      <td>5.251408</td>\n",
       "      <td>5.187395</td>\n",
       "      <td>3.975166</td>\n",
       "      <td>2.709106</td>\n",
       "      <td>2.334619</td>\n",
       "      <td>2.397066</td>\n",
       "      <td>2.423454</td>\n",
       "      <td>4.081158</td>\n",
       "      <td>2.802490</td>\n",
       "      <td>2.839501</td>\n",
       "      <td>4.210858</td>\n",
       "      <td>4.336104</td>\n",
       "      <td>0.487950</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.483676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-02-12</th>\n",
       "      <td>3.587677</td>\n",
       "      <td>3.608373</td>\n",
       "      <td>3.290303</td>\n",
       "      <td>2.262056</td>\n",
       "      <td>5.571108</td>\n",
       "      <td>3.048976</td>\n",
       "      <td>2.974059</td>\n",
       "      <td>3.022753</td>\n",
       "      <td>2.914760</td>\n",
       "      <td>1.746749</td>\n",
       "      <td>4.063753</td>\n",
       "      <td>1.828705</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-02-19</th>\n",
       "      <td>5.064609</td>\n",
       "      <td>3.575012</td>\n",
       "      <td>4.196621</td>\n",
       "      <td>4.311569</td>\n",
       "      <td>2.321716</td>\n",
       "      <td>3.024078</td>\n",
       "      <td>4.958631</td>\n",
       "      <td>2.283444</td>\n",
       "      <td>2.560591</td>\n",
       "      <td>2.531361</td>\n",
       "      <td>5.910938</td>\n",
       "      <td>4.685377</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-02-26</th>\n",
       "      <td>7.020716</td>\n",
       "      <td>5.147348</td>\n",
       "      <td>5.578470</td>\n",
       "      <td>4.482075</td>\n",
       "      <td>6.480712</td>\n",
       "      <td>5.029874</td>\n",
       "      <td>6.037916</td>\n",
       "      <td>4.869668</td>\n",
       "      <td>4.705163</td>\n",
       "      <td>4.920064</td>\n",
       "      <td>5.091162</td>\n",
       "      <td>6.182283</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-03-05</th>\n",
       "      <td>0.997721</td>\n",
       "      <td>2.851955</td>\n",
       "      <td>1.796871</td>\n",
       "      <td>1.652572</td>\n",
       "      <td>2.957129</td>\n",
       "      <td>2.022247</td>\n",
       "      <td>3.338177</td>\n",
       "      <td>2.877395</td>\n",
       "      <td>2.610124</td>\n",
       "      <td>1.593685</td>\n",
       "      <td>4.332331</td>\n",
       "      <td>3.021387</td>\n",
       "      <td>0.487950</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.027746</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-03-12</th>\n",
       "      <td>3.732263</td>\n",
       "      <td>3.230167</td>\n",
       "      <td>3.592909</td>\n",
       "      <td>2.609928</td>\n",
       "      <td>3.110857</td>\n",
       "      <td>3.440419</td>\n",
       "      <td>5.537269</td>\n",
       "      <td>3.760557</td>\n",
       "      <td>3.657690</td>\n",
       "      <td>3.655113</td>\n",
       "      <td>4.358759</td>\n",
       "      <td>5.769890</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-03-19</th>\n",
       "      <td>3.860036</td>\n",
       "      <td>2.352867</td>\n",
       "      <td>2.939244</td>\n",
       "      <td>2.416746</td>\n",
       "      <td>2.654289</td>\n",
       "      <td>2.045448</td>\n",
       "      <td>4.046593</td>\n",
       "      <td>3.373421</td>\n",
       "      <td>3.301880</td>\n",
       "      <td>3.099472</td>\n",
       "      <td>3.779727</td>\n",
       "      <td>4.331958</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-03-26</th>\n",
       "      <td>3.613298</td>\n",
       "      <td>3.657265</td>\n",
       "      <td>4.041121</td>\n",
       "      <td>2.410127</td>\n",
       "      <td>2.927188</td>\n",
       "      <td>2.285729</td>\n",
       "      <td>2.892270</td>\n",
       "      <td>2.789682</td>\n",
       "      <td>2.469432</td>\n",
       "      <td>2.538224</td>\n",
       "      <td>4.318069</td>\n",
       "      <td>3.701846</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-04-02</th>\n",
       "      <td>5.046922</td>\n",
       "      <td>4.687315</td>\n",
       "      <td>3.678996</td>\n",
       "      <td>3.625488</td>\n",
       "      <td>5.657679</td>\n",
       "      <td>4.054639</td>\n",
       "      <td>4.047068</td>\n",
       "      <td>4.689504</td>\n",
       "      <td>4.025317</td>\n",
       "      <td>3.191115</td>\n",
       "      <td>4.179854</td>\n",
       "      <td>3.924555</td>\n",
       "      <td>0.487950</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.483676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-04-09</th>\n",
       "      <td>4.604392</td>\n",
       "      <td>2.845399</td>\n",
       "      <td>2.902991</td>\n",
       "      <td>2.854052</td>\n",
       "      <td>2.743895</td>\n",
       "      <td>2.525046</td>\n",
       "      <td>2.109769</td>\n",
       "      <td>1.996609</td>\n",
       "      <td>1.935058</td>\n",
       "      <td>2.336182</td>\n",
       "      <td>3.147781</td>\n",
       "      <td>2.598271</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-04-16</th>\n",
       "      <td>3.937727</td>\n",
       "      <td>2.607118</td>\n",
       "      <td>4.585752</td>\n",
       "      <td>2.664416</td>\n",
       "      <td>1.941836</td>\n",
       "      <td>2.388107</td>\n",
       "      <td>1.970667</td>\n",
       "      <td>2.379446</td>\n",
       "      <td>2.123279</td>\n",
       "      <td>2.161137</td>\n",
       "      <td>3.641464</td>\n",
       "      <td>2.747842</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-04-23</th>\n",
       "      <td>5.676655</td>\n",
       "      <td>4.631736</td>\n",
       "      <td>5.456290</td>\n",
       "      <td>3.835403</td>\n",
       "      <td>4.122437</td>\n",
       "      <td>3.835998</td>\n",
       "      <td>3.254663</td>\n",
       "      <td>3.935731</td>\n",
       "      <td>3.656682</td>\n",
       "      <td>3.347972</td>\n",
       "      <td>4.735096</td>\n",
       "      <td>5.908542</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-04-30</th>\n",
       "      <td>4.349662</td>\n",
       "      <td>2.871425</td>\n",
       "      <td>3.732776</td>\n",
       "      <td>1.897616</td>\n",
       "      <td>3.259907</td>\n",
       "      <td>2.528436</td>\n",
       "      <td>3.565777</td>\n",
       "      <td>3.426255</td>\n",
       "      <td>2.718926</td>\n",
       "      <td>2.840568</td>\n",
       "      <td>2.948237</td>\n",
       "      <td>5.108365</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-05-07</th>\n",
       "      <td>5.025507</td>\n",
       "      <td>3.750835</td>\n",
       "      <td>4.301778</td>\n",
       "      <td>3.141495</td>\n",
       "      <td>5.781916</td>\n",
       "      <td>3.324038</td>\n",
       "      <td>4.419008</td>\n",
       "      <td>4.461950</td>\n",
       "      <td>3.558856</td>\n",
       "      <td>3.620819</td>\n",
       "      <td>8.003490</td>\n",
       "      <td>7.728504</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-05-14</th>\n",
       "      <td>3.371022</td>\n",
       "      <td>3.782947</td>\n",
       "      <td>3.002225</td>\n",
       "      <td>3.509695</td>\n",
       "      <td>4.813159</td>\n",
       "      <td>4.660173</td>\n",
       "      <td>5.744586</td>\n",
       "      <td>4.690361</td>\n",
       "      <td>5.126826</td>\n",
       "      <td>5.460237</td>\n",
       "      <td>3.968272</td>\n",
       "      <td>7.858246</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-05-21</th>\n",
       "      <td>3.631730</td>\n",
       "      <td>2.468906</td>\n",
       "      <td>3.767505</td>\n",
       "      <td>0.668791</td>\n",
       "      <td>2.541271</td>\n",
       "      <td>1.377071</td>\n",
       "      <td>1.650089</td>\n",
       "      <td>2.221636</td>\n",
       "      <td>1.613885</td>\n",
       "      <td>2.216889</td>\n",
       "      <td>1.975853</td>\n",
       "      <td>3.310819</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-05-28</th>\n",
       "      <td>2.739433</td>\n",
       "      <td>3.378537</td>\n",
       "      <td>6.355768</td>\n",
       "      <td>1.378803</td>\n",
       "      <td>2.945134</td>\n",
       "      <td>1.873381</td>\n",
       "      <td>2.350104</td>\n",
       "      <td>3.207147</td>\n",
       "      <td>1.990891</td>\n",
       "      <td>2.575661</td>\n",
       "      <td>3.024524</td>\n",
       "      <td>3.811818</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-06-04</th>\n",
       "      <td>3.099701</td>\n",
       "      <td>1.868125</td>\n",
       "      <td>3.474607</td>\n",
       "      <td>2.323826</td>\n",
       "      <td>2.305695</td>\n",
       "      <td>1.332009</td>\n",
       "      <td>2.300028</td>\n",
       "      <td>0.915184</td>\n",
       "      <td>1.954609</td>\n",
       "      <td>2.096989</td>\n",
       "      <td>2.611139</td>\n",
       "      <td>2.593586</td>\n",
       "      <td>0.534522</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14.738999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-06-11</th>\n",
       "      <td>2.248597</td>\n",
       "      <td>1.524836</td>\n",
       "      <td>1.887475</td>\n",
       "      <td>1.603775</td>\n",
       "      <td>2.238228</td>\n",
       "      <td>2.204087</td>\n",
       "      <td>2.514689</td>\n",
       "      <td>2.857527</td>\n",
       "      <td>1.695090</td>\n",
       "      <td>2.158323</td>\n",
       "      <td>3.993062</td>\n",
       "      <td>4.925055</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-06-18</th>\n",
       "      <td>3.009482</td>\n",
       "      <td>3.509444</td>\n",
       "      <td>3.429057</td>\n",
       "      <td>2.130352</td>\n",
       "      <td>4.175947</td>\n",
       "      <td>3.292713</td>\n",
       "      <td>3.417989</td>\n",
       "      <td>4.858023</td>\n",
       "      <td>2.900464</td>\n",
       "      <td>3.792400</td>\n",
       "      <td>6.477887</td>\n",
       "      <td>6.242673</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-06-25</th>\n",
       "      <td>1.982035</td>\n",
       "      <td>2.212460</td>\n",
       "      <td>1.916454</td>\n",
       "      <td>1.332234</td>\n",
       "      <td>1.422401</td>\n",
       "      <td>1.448318</td>\n",
       "      <td>2.455385</td>\n",
       "      <td>2.109358</td>\n",
       "      <td>2.042257</td>\n",
       "      <td>2.286218</td>\n",
       "      <td>2.498386</td>\n",
       "      <td>3.063011</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-07-02</th>\n",
       "      <td>2.557856</td>\n",
       "      <td>2.902411</td>\n",
       "      <td>1.161629</td>\n",
       "      <td>1.911018</td>\n",
       "      <td>2.172125</td>\n",
       "      <td>1.626363</td>\n",
       "      <td>1.927673</td>\n",
       "      <td>3.065467</td>\n",
       "      <td>1.745125</td>\n",
       "      <td>1.564144</td>\n",
       "      <td>6.303747</td>\n",
       "      <td>3.652313</td>\n",
       "      <td>0.487950</td>\n",
       "      <td>0.0</td>\n",
       "      <td>12.998168</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-07-09</th>\n",
       "      <td>3.664855</td>\n",
       "      <td>2.686658</td>\n",
       "      <td>2.995919</td>\n",
       "      <td>2.898890</td>\n",
       "      <td>3.661383</td>\n",
       "      <td>2.459639</td>\n",
       "      <td>3.493425</td>\n",
       "      <td>3.160424</td>\n",
       "      <td>3.453210</td>\n",
       "      <td>3.657179</td>\n",
       "      <td>4.537988</td>\n",
       "      <td>3.665705</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-07-16</th>\n",
       "      <td>5.168710</td>\n",
       "      <td>3.849630</td>\n",
       "      <td>2.166206</td>\n",
       "      <td>2.665625</td>\n",
       "      <td>4.596567</td>\n",
       "      <td>3.164715</td>\n",
       "      <td>4.489523</td>\n",
       "      <td>4.083629</td>\n",
       "      <td>3.978635</td>\n",
       "      <td>3.271899</td>\n",
       "      <td>4.971060</td>\n",
       "      <td>4.974273</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-07-23</th>\n",
       "      <td>1.047978</td>\n",
       "      <td>1.400010</td>\n",
       "      <td>2.783208</td>\n",
       "      <td>1.158908</td>\n",
       "      <td>0.764956</td>\n",
       "      <td>0.617815</td>\n",
       "      <td>1.757905</td>\n",
       "      <td>1.479152</td>\n",
       "      <td>0.873207</td>\n",
       "      <td>1.439785</td>\n",
       "      <td>2.050218</td>\n",
       "      <td>2.133994</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-07-30</th>\n",
       "      <td>4.157641</td>\n",
       "      <td>3.203206</td>\n",
       "      <td>3.276465</td>\n",
       "      <td>2.843207</td>\n",
       "      <td>4.514505</td>\n",
       "      <td>3.786633</td>\n",
       "      <td>5.110195</td>\n",
       "      <td>4.060478</td>\n",
       "      <td>4.504844</td>\n",
       "      <td>4.350268</td>\n",
       "      <td>5.580903</td>\n",
       "      <td>6.664574</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-08-06</th>\n",
       "      <td>2.950887</td>\n",
       "      <td>3.985226</td>\n",
       "      <td>3.483894</td>\n",
       "      <td>1.647275</td>\n",
       "      <td>4.189524</td>\n",
       "      <td>2.642246</td>\n",
       "      <td>3.709319</td>\n",
       "      <td>3.921508</td>\n",
       "      <td>3.217501</td>\n",
       "      <td>2.903018</td>\n",
       "      <td>4.901377</td>\n",
       "      <td>4.448251</td>\n",
       "      <td>0.377964</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.533394</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-08-13</th>\n",
       "      <td>4.422268</td>\n",
       "      <td>2.053326</td>\n",
       "      <td>2.174407</td>\n",
       "      <td>1.921080</td>\n",
       "      <td>3.071872</td>\n",
       "      <td>2.045195</td>\n",
       "      <td>3.073187</td>\n",
       "      <td>2.088368</td>\n",
       "      <td>2.718228</td>\n",
       "      <td>2.073777</td>\n",
       "      <td>2.931302</td>\n",
       "      <td>3.356585</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-08-20</th>\n",
       "      <td>2.283635</td>\n",
       "      <td>2.523416</td>\n",
       "      <td>1.766039</td>\n",
       "      <td>1.938109</td>\n",
       "      <td>2.568539</td>\n",
       "      <td>2.227127</td>\n",
       "      <td>3.197566</td>\n",
       "      <td>2.972809</td>\n",
       "      <td>2.339544</td>\n",
       "      <td>2.730237</td>\n",
       "      <td>4.086725</td>\n",
       "      <td>3.934238</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-08-27</th>\n",
       "      <td>3.395857</td>\n",
       "      <td>3.174702</td>\n",
       "      <td>3.071403</td>\n",
       "      <td>2.455711</td>\n",
       "      <td>4.380624</td>\n",
       "      <td>3.416186</td>\n",
       "      <td>4.170083</td>\n",
       "      <td>4.900671</td>\n",
       "      <td>4.120185</td>\n",
       "      <td>3.855302</td>\n",
       "      <td>6.711322</td>\n",
       "      <td>4.947608</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-09-03</th>\n",
       "      <td>4.398615</td>\n",
       "      <td>7.474025</td>\n",
       "      <td>4.395383</td>\n",
       "      <td>3.790030</td>\n",
       "      <td>6.128522</td>\n",
       "      <td>4.455552</td>\n",
       "      <td>3.920110</td>\n",
       "      <td>5.012759</td>\n",
       "      <td>4.155931</td>\n",
       "      <td>3.993736</td>\n",
       "      <td>7.678051</td>\n",
       "      <td>6.308087</td>\n",
       "      <td>0.534522</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14.738999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-09-10</th>\n",
       "      <td>5.207278</td>\n",
       "      <td>4.003996</td>\n",
       "      <td>3.922643</td>\n",
       "      <td>3.151502</td>\n",
       "      <td>3.178791</td>\n",
       "      <td>2.965546</td>\n",
       "      <td>4.258696</td>\n",
       "      <td>3.074692</td>\n",
       "      <td>3.767708</td>\n",
       "      <td>3.649278</td>\n",
       "      <td>4.220584</td>\n",
       "      <td>6.049619</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-09-17</th>\n",
       "      <td>7.679190</td>\n",
       "      <td>5.360585</td>\n",
       "      <td>6.638947</td>\n",
       "      <td>5.560509</td>\n",
       "      <td>6.279010</td>\n",
       "      <td>4.706530</td>\n",
       "      <td>4.235755</td>\n",
       "      <td>4.565163</td>\n",
       "      <td>4.847073</td>\n",
       "      <td>5.128338</td>\n",
       "      <td>4.464252</td>\n",
       "      <td>6.332885</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-09-24</th>\n",
       "      <td>1.267399</td>\n",
       "      <td>3.445262</td>\n",
       "      <td>2.322229</td>\n",
       "      <td>1.609614</td>\n",
       "      <td>3.125219</td>\n",
       "      <td>2.293031</td>\n",
       "      <td>1.444916</td>\n",
       "      <td>3.342247</td>\n",
       "      <td>1.523142</td>\n",
       "      <td>2.354092</td>\n",
       "      <td>5.235868</td>\n",
       "      <td>3.113507</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-10-01</th>\n",
       "      <td>4.559572</td>\n",
       "      <td>2.812482</td>\n",
       "      <td>4.201062</td>\n",
       "      <td>2.050553</td>\n",
       "      <td>3.353967</td>\n",
       "      <td>1.901786</td>\n",
       "      <td>2.098203</td>\n",
       "      <td>3.425963</td>\n",
       "      <td>1.790306</td>\n",
       "      <td>3.908397</td>\n",
       "      <td>5.091268</td>\n",
       "      <td>4.696504</td>\n",
       "      <td>0.377964</td>\n",
       "      <td>0.0</td>\n",
       "      <td>10.160615</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-10-08</th>\n",
       "      <td>5.596710</td>\n",
       "      <td>5.060803</td>\n",
       "      <td>4.394234</td>\n",
       "      <td>3.249050</td>\n",
       "      <td>3.830935</td>\n",
       "      <td>3.686641</td>\n",
       "      <td>3.420894</td>\n",
       "      <td>3.313201</td>\n",
       "      <td>3.717239</td>\n",
       "      <td>4.296870</td>\n",
       "      <td>4.800403</td>\n",
       "      <td>5.462002</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-10-15</th>\n",
       "      <td>4.780675</td>\n",
       "      <td>2.707483</td>\n",
       "      <td>5.979099</td>\n",
       "      <td>2.367850</td>\n",
       "      <td>2.246657</td>\n",
       "      <td>1.969085</td>\n",
       "      <td>3.409743</td>\n",
       "      <td>2.506401</td>\n",
       "      <td>2.947025</td>\n",
       "      <td>3.569308</td>\n",
       "      <td>4.113200</td>\n",
       "      <td>4.098130</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-10-22</th>\n",
       "      <td>7.888314</td>\n",
       "      <td>5.998199</td>\n",
       "      <td>5.463782</td>\n",
       "      <td>4.989763</td>\n",
       "      <td>6.095112</td>\n",
       "      <td>3.801637</td>\n",
       "      <td>5.334910</td>\n",
       "      <td>5.199929</td>\n",
       "      <td>3.785875</td>\n",
       "      <td>5.890511</td>\n",
       "      <td>5.645871</td>\n",
       "      <td>7.468377</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-10-29</th>\n",
       "      <td>7.957637</td>\n",
       "      <td>6.879973</td>\n",
       "      <td>7.428776</td>\n",
       "      <td>5.576503</td>\n",
       "      <td>7.344744</td>\n",
       "      <td>5.101188</td>\n",
       "      <td>4.542684</td>\n",
       "      <td>5.506544</td>\n",
       "      <td>4.448500</td>\n",
       "      <td>6.277629</td>\n",
       "      <td>7.056150</td>\n",
       "      <td>8.340881</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-11-05</th>\n",
       "      <td>3.369201</td>\n",
       "      <td>3.900278</td>\n",
       "      <td>2.461109</td>\n",
       "      <td>2.448363</td>\n",
       "      <td>3.664806</td>\n",
       "      <td>2.513051</td>\n",
       "      <td>2.727816</td>\n",
       "      <td>3.599111</td>\n",
       "      <td>3.003274</td>\n",
       "      <td>2.784450</td>\n",
       "      <td>4.038493</td>\n",
       "      <td>3.870800</td>\n",
       "      <td>0.487950</td>\n",
       "      <td>0.0</td>\n",
       "      <td>13.483676</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-11-12</th>\n",
       "      <td>3.939811</td>\n",
       "      <td>2.141191</td>\n",
       "      <td>6.779554</td>\n",
       "      <td>2.930324</td>\n",
       "      <td>2.090641</td>\n",
       "      <td>1.414308</td>\n",
       "      <td>2.388943</td>\n",
       "      <td>2.181840</td>\n",
       "      <td>2.153102</td>\n",
       "      <td>2.843518</td>\n",
       "      <td>2.532196</td>\n",
       "      <td>3.690752</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-11-19</th>\n",
       "      <td>2.784358</td>\n",
       "      <td>3.208548</td>\n",
       "      <td>9.415716</td>\n",
       "      <td>4.176374</td>\n",
       "      <td>2.092809</td>\n",
       "      <td>3.440953</td>\n",
       "      <td>7.027159</td>\n",
       "      <td>3.452202</td>\n",
       "      <td>3.488521</td>\n",
       "      <td>4.402588</td>\n",
       "      <td>3.643285</td>\n",
       "      <td>3.787654</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-11-26</th>\n",
       "      <td>3.214368</td>\n",
       "      <td>3.277904</td>\n",
       "      <td>3.622254</td>\n",
       "      <td>1.824938</td>\n",
       "      <td>2.132751</td>\n",
       "      <td>1.822767</td>\n",
       "      <td>3.551685</td>\n",
       "      <td>2.276663</td>\n",
       "      <td>2.392934</td>\n",
       "      <td>2.747452</td>\n",
       "      <td>5.407223</td>\n",
       "      <td>6.475867</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-12-03</th>\n",
       "      <td>5.704669</td>\n",
       "      <td>5.107089</td>\n",
       "      <td>4.163650</td>\n",
       "      <td>4.097123</td>\n",
       "      <td>5.536334</td>\n",
       "      <td>3.534980</td>\n",
       "      <td>4.186505</td>\n",
       "      <td>3.744471</td>\n",
       "      <td>3.658796</td>\n",
       "      <td>3.680477</td>\n",
       "      <td>5.552648</td>\n",
       "      <td>5.233192</td>\n",
       "      <td>0.534522</td>\n",
       "      <td>0.0</td>\n",
       "      <td>14.205968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-12-10</th>\n",
       "      <td>4.890152</td>\n",
       "      <td>4.115506</td>\n",
       "      <td>4.682044</td>\n",
       "      <td>3.782631</td>\n",
       "      <td>3.345941</td>\n",
       "      <td>3.481252</td>\n",
       "      <td>4.357862</td>\n",
       "      <td>4.503161</td>\n",
       "      <td>3.452864</td>\n",
       "      <td>4.156207</td>\n",
       "      <td>4.667933</td>\n",
       "      <td>7.345893</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-12-17</th>\n",
       "      <td>4.095106</td>\n",
       "      <td>3.587886</td>\n",
       "      <td>3.843380</td>\n",
       "      <td>3.501489</td>\n",
       "      <td>3.943048</td>\n",
       "      <td>3.312448</td>\n",
       "      <td>6.474478</td>\n",
       "      <td>3.482027</td>\n",
       "      <td>4.333020</td>\n",
       "      <td>4.633398</td>\n",
       "      <td>6.531043</td>\n",
       "      <td>5.665006</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-12-24</th>\n",
       "      <td>4.959717</td>\n",
       "      <td>2.220866</td>\n",
       "      <td>5.653229</td>\n",
       "      <td>5.341288</td>\n",
       "      <td>4.898600</td>\n",
       "      <td>4.019469</td>\n",
       "      <td>5.724775</td>\n",
       "      <td>4.134367</td>\n",
       "      <td>4.243508</td>\n",
       "      <td>4.637096</td>\n",
       "      <td>5.065308</td>\n",
       "      <td>5.048035</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1961-12-31</th>\n",
       "      <td>5.787783</td>\n",
       "      <td>4.566479</td>\n",
       "      <td>9.739918</td>\n",
       "      <td>4.167851</td>\n",
       "      <td>3.018856</td>\n",
       "      <td>2.674370</td>\n",
       "      <td>5.142213</td>\n",
       "      <td>4.289240</td>\n",
       "      <td>3.325214</td>\n",
       "      <td>3.526625</td>\n",
       "      <td>3.262217</td>\n",
       "      <td>3.012729</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>2.160247</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 RPT       VAL       ROS       KIL       SHA       BIR  \\\n",
       "Yr_Mo_Dy                                                                 \n",
       "1961-01-01       NaN       NaN       NaN       NaN       NaN       NaN   \n",
       "1961-01-08  2.631321  3.949525  1.604761  1.810743  3.251660  2.059546   \n",
       "1961-01-15  3.555392  3.148945  5.034959  3.549559  3.471726  3.251039   \n",
       "1961-01-22  5.337402  3.837785  5.086229  6.245541  3.612875  3.453432   \n",
       "1961-01-29  4.619061  5.170224  4.665843  4.301325  4.858116  3.749415   \n",
       "1961-02-05  5.251408  5.187395  3.975166  2.709106  2.334619  2.397066   \n",
       "1961-02-12  3.587677  3.608373  3.290303  2.262056  5.571108  3.048976   \n",
       "1961-02-19  5.064609  3.575012  4.196621  4.311569  2.321716  3.024078   \n",
       "1961-02-26  7.020716  5.147348  5.578470  4.482075  6.480712  5.029874   \n",
       "1961-03-05  0.997721  2.851955  1.796871  1.652572  2.957129  2.022247   \n",
       "1961-03-12  3.732263  3.230167  3.592909  2.609928  3.110857  3.440419   \n",
       "1961-03-19  3.860036  2.352867  2.939244  2.416746  2.654289  2.045448   \n",
       "1961-03-26  3.613298  3.657265  4.041121  2.410127  2.927188  2.285729   \n",
       "1961-04-02  5.046922  4.687315  3.678996  3.625488  5.657679  4.054639   \n",
       "1961-04-09  4.604392  2.845399  2.902991  2.854052  2.743895  2.525046   \n",
       "1961-04-16  3.937727  2.607118  4.585752  2.664416  1.941836  2.388107   \n",
       "1961-04-23  5.676655  4.631736  5.456290  3.835403  4.122437  3.835998   \n",
       "1961-04-30  4.349662  2.871425  3.732776  1.897616  3.259907  2.528436   \n",
       "1961-05-07  5.025507  3.750835  4.301778  3.141495  5.781916  3.324038   \n",
       "1961-05-14  3.371022  3.782947  3.002225  3.509695  4.813159  4.660173   \n",
       "1961-05-21  3.631730  2.468906  3.767505  0.668791  2.541271  1.377071   \n",
       "1961-05-28  2.739433  3.378537  6.355768  1.378803  2.945134  1.873381   \n",
       "1961-06-04  3.099701  1.868125  3.474607  2.323826  2.305695  1.332009   \n",
       "1961-06-11  2.248597  1.524836  1.887475  1.603775  2.238228  2.204087   \n",
       "1961-06-18  3.009482  3.509444  3.429057  2.130352  4.175947  3.292713   \n",
       "1961-06-25  1.982035  2.212460  1.916454  1.332234  1.422401  1.448318   \n",
       "1961-07-02  2.557856  2.902411  1.161629  1.911018  2.172125  1.626363   \n",
       "1961-07-09  3.664855  2.686658  2.995919  2.898890  3.661383  2.459639   \n",
       "1961-07-16  5.168710  3.849630  2.166206  2.665625  4.596567  3.164715   \n",
       "1961-07-23  1.047978  1.400010  2.783208  1.158908  0.764956  0.617815   \n",
       "1961-07-30  4.157641  3.203206  3.276465  2.843207  4.514505  3.786633   \n",
       "1961-08-06  2.950887  3.985226  3.483894  1.647275  4.189524  2.642246   \n",
       "1961-08-13  4.422268  2.053326  2.174407  1.921080  3.071872  2.045195   \n",
       "1961-08-20  2.283635  2.523416  1.766039  1.938109  2.568539  2.227127   \n",
       "1961-08-27  3.395857  3.174702  3.071403  2.455711  4.380624  3.416186   \n",
       "1961-09-03  4.398615  7.474025  4.395383  3.790030  6.128522  4.455552   \n",
       "1961-09-10  5.207278  4.003996  3.922643  3.151502  3.178791  2.965546   \n",
       "1961-09-17  7.679190  5.360585  6.638947  5.560509  6.279010  4.706530   \n",
       "1961-09-24  1.267399  3.445262  2.322229  1.609614  3.125219  2.293031   \n",
       "1961-10-01  4.559572  2.812482  4.201062  2.050553  3.353967  1.901786   \n",
       "1961-10-08  5.596710  5.060803  4.394234  3.249050  3.830935  3.686641   \n",
       "1961-10-15  4.780675  2.707483  5.979099  2.367850  2.246657  1.969085   \n",
       "1961-10-22  7.888314  5.998199  5.463782  4.989763  6.095112  3.801637   \n",
       "1961-10-29  7.957637  6.879973  7.428776  5.576503  7.344744  5.101188   \n",
       "1961-11-05  3.369201  3.900278  2.461109  2.448363  3.664806  2.513051   \n",
       "1961-11-12  3.939811  2.141191  6.779554  2.930324  2.090641  1.414308   \n",
       "1961-11-19  2.784358  3.208548  9.415716  4.176374  2.092809  3.440953   \n",
       "1961-11-26  3.214368  3.277904  3.622254  1.824938  2.132751  1.822767   \n",
       "1961-12-03  5.704669  5.107089  4.163650  4.097123  5.536334  3.534980   \n",
       "1961-12-10  4.890152  4.115506  4.682044  3.782631  3.345941  3.481252   \n",
       "1961-12-17  4.095106  3.587886  3.843380  3.501489  3.943048  3.312448   \n",
       "1961-12-24  4.959717  2.220866  5.653229  5.341288  4.898600  4.019469   \n",
       "1961-12-31  5.787783  4.566479  9.739918  4.167851  3.018856  2.674370   \n",
       "\n",
       "                 DUB       CLA       MUL       CLO       BEL       MAL  \\\n",
       "Yr_Mo_Dy                                                                 \n",
       "1961-01-01       NaN       NaN       NaN       NaN       NaN       NaN   \n",
       "1961-01-08  1.872222  3.098404  1.722255  1.704941  4.349139  1.773062   \n",
       "1961-01-15  4.709309  3.936894  3.500975  4.084293  5.552215  4.692355   \n",
       "1961-01-22  5.166300  3.164990  4.169112  4.783952  3.626584  4.237239   \n",
       "1961-01-29  4.508449  4.436222  4.902057  3.713368  5.210726  3.874721   \n",
       "1961-02-05  2.423454  4.081158  2.802490  2.839501  4.210858  4.336104   \n",
       "1961-02-12  2.974059  3.022753  2.914760  1.746749  4.063753  1.828705   \n",
       "1961-02-19  4.958631  2.283444  2.560591  2.531361  5.910938  4.685377   \n",
       "1961-02-26  6.037916  4.869668  4.705163  4.920064  5.091162  6.182283   \n",
       "1961-03-05  3.338177  2.877395  2.610124  1.593685  4.332331  3.021387   \n",
       "1961-03-12  5.537269  3.760557  3.657690  3.655113  4.358759  5.769890   \n",
       "1961-03-19  4.046593  3.373421  3.301880  3.099472  3.779727  4.331958   \n",
       "1961-03-26  2.892270  2.789682  2.469432  2.538224  4.318069  3.701846   \n",
       "1961-04-02  4.047068  4.689504  4.025317  3.191115  4.179854  3.924555   \n",
       "1961-04-09  2.109769  1.996609  1.935058  2.336182  3.147781  2.598271   \n",
       "1961-04-16  1.970667  2.379446  2.123279  2.161137  3.641464  2.747842   \n",
       "1961-04-23  3.254663  3.935731  3.656682  3.347972  4.735096  5.908542   \n",
       "1961-04-30  3.565777  3.426255  2.718926  2.840568  2.948237  5.108365   \n",
       "1961-05-07  4.419008  4.461950  3.558856  3.620819  8.003490  7.728504   \n",
       "1961-05-14  5.744586  4.690361  5.126826  5.460237  3.968272  7.858246   \n",
       "1961-05-21  1.650089  2.221636  1.613885  2.216889  1.975853  3.310819   \n",
       "1961-05-28  2.350104  3.207147  1.990891  2.575661  3.024524  3.811818   \n",
       "1961-06-04  2.300028  0.915184  1.954609  2.096989  2.611139  2.593586   \n",
       "1961-06-11  2.514689  2.857527  1.695090  2.158323  3.993062  4.925055   \n",
       "1961-06-18  3.417989  4.858023  2.900464  3.792400  6.477887  6.242673   \n",
       "1961-06-25  2.455385  2.109358  2.042257  2.286218  2.498386  3.063011   \n",
       "1961-07-02  1.927673  3.065467  1.745125  1.564144  6.303747  3.652313   \n",
       "1961-07-09  3.493425  3.160424  3.453210  3.657179  4.537988  3.665705   \n",
       "1961-07-16  4.489523  4.083629  3.978635  3.271899  4.971060  4.974273   \n",
       "1961-07-23  1.757905  1.479152  0.873207  1.439785  2.050218  2.133994   \n",
       "1961-07-30  5.110195  4.060478  4.504844  4.350268  5.580903  6.664574   \n",
       "1961-08-06  3.709319  3.921508  3.217501  2.903018  4.901377  4.448251   \n",
       "1961-08-13  3.073187  2.088368  2.718228  2.073777  2.931302  3.356585   \n",
       "1961-08-20  3.197566  2.972809  2.339544  2.730237  4.086725  3.934238   \n",
       "1961-08-27  4.170083  4.900671  4.120185  3.855302  6.711322  4.947608   \n",
       "1961-09-03  3.920110  5.012759  4.155931  3.993736  7.678051  6.308087   \n",
       "1961-09-10  4.258696  3.074692  3.767708  3.649278  4.220584  6.049619   \n",
       "1961-09-17  4.235755  4.565163  4.847073  5.128338  4.464252  6.332885   \n",
       "1961-09-24  1.444916  3.342247  1.523142  2.354092  5.235868  3.113507   \n",
       "1961-10-01  2.098203  3.425963  1.790306  3.908397  5.091268  4.696504   \n",
       "1961-10-08  3.420894  3.313201  3.717239  4.296870  4.800403  5.462002   \n",
       "1961-10-15  3.409743  2.506401  2.947025  3.569308  4.113200  4.098130   \n",
       "1961-10-22  5.334910  5.199929  3.785875  5.890511  5.645871  7.468377   \n",
       "1961-10-29  4.542684  5.506544  4.448500  6.277629  7.056150  8.340881   \n",
       "1961-11-05  2.727816  3.599111  3.003274  2.784450  4.038493  3.870800   \n",
       "1961-11-12  2.388943  2.181840  2.153102  2.843518  2.532196  3.690752   \n",
       "1961-11-19  7.027159  3.452202  3.488521  4.402588  3.643285  3.787654   \n",
       "1961-11-26  3.551685  2.276663  2.392934  2.747452  5.407223  6.475867   \n",
       "1961-12-03  4.186505  3.744471  3.658796  3.680477  5.552648  5.233192   \n",
       "1961-12-10  4.357862  4.503161  3.452864  4.156207  4.667933  7.345893   \n",
       "1961-12-17  6.474478  3.482027  4.333020  4.633398  6.531043  5.665006   \n",
       "1961-12-24  5.724775  4.134367  4.243508  4.637096  5.065308  5.048035   \n",
       "1961-12-31  5.142213  4.289240  3.325214  3.526625  3.262217  3.012729   \n",
       "\n",
       "               month  year        day  \n",
       "Yr_Mo_Dy                               \n",
       "1961-01-01       NaN   NaN        NaN  \n",
       "1961-01-08  0.000000   0.0   2.160247  \n",
       "1961-01-15  0.000000   0.0   2.160247  \n",
       "1961-01-22  0.000000   0.0   2.160247  \n",
       "1961-01-29  0.000000   0.0   2.160247  \n",
       "1961-02-05  0.487950   0.0  13.483676  \n",
       "1961-02-12  0.000000   0.0   2.160247  \n",
       "1961-02-19  0.000000   0.0   2.160247  \n",
       "1961-02-26  0.000000   0.0   2.160247  \n",
       "1961-03-05  0.487950   0.0  12.027746  \n",
       "1961-03-12  0.000000   0.0   2.160247  \n",
       "1961-03-19  0.000000   0.0   2.160247  \n",
       "1961-03-26  0.000000   0.0   2.160247  \n",
       "1961-04-02  0.487950   0.0  13.483676  \n",
       "1961-04-09  0.000000   0.0   2.160247  \n",
       "1961-04-16  0.000000   0.0   2.160247  \n",
       "1961-04-23  0.000000   0.0   2.160247  \n",
       "1961-04-30  0.000000   0.0   2.160247  \n",
       "1961-05-07  0.000000   0.0   2.160247  \n",
       "1961-05-14  0.000000   0.0   2.160247  \n",
       "1961-05-21  0.000000   0.0   2.160247  \n",
       "1961-05-28  0.000000   0.0   2.160247  \n",
       "1961-06-04  0.534522   0.0  14.738999  \n",
       "1961-06-11  0.000000   0.0   2.160247  \n",
       "1961-06-18  0.000000   0.0   2.160247  \n",
       "1961-06-25  0.000000   0.0   2.160247  \n",
       "1961-07-02  0.487950   0.0  12.998168  \n",
       "1961-07-09  0.000000   0.0   2.160247  \n",
       "1961-07-16  0.000000   0.0   2.160247  \n",
       "1961-07-23  0.000000   0.0   2.160247  \n",
       "1961-07-30  0.000000   0.0   2.160247  \n",
       "1961-08-06  0.377964   0.0  10.533394  \n",
       "1961-08-13  0.000000   0.0   2.160247  \n",
       "1961-08-20  0.000000   0.0   2.160247  \n",
       "1961-08-27  0.000000   0.0   2.160247  \n",
       "1961-09-03  0.534522   0.0  14.738999  \n",
       "1961-09-10  0.000000   0.0   2.160247  \n",
       "1961-09-17  0.000000   0.0   2.160247  \n",
       "1961-09-24  0.000000   0.0   2.160247  \n",
       "1961-10-01  0.377964   0.0  10.160615  \n",
       "1961-10-08  0.000000   0.0   2.160247  \n",
       "1961-10-15  0.000000   0.0   2.160247  \n",
       "1961-10-22  0.000000   0.0   2.160247  \n",
       "1961-10-29  0.000000   0.0   2.160247  \n",
       "1961-11-05  0.487950   0.0  13.483676  \n",
       "1961-11-12  0.000000   0.0   2.160247  \n",
       "1961-11-19  0.000000   0.0   2.160247  \n",
       "1961-11-26  0.000000   0.0   2.160247  \n",
       "1961-12-03  0.534522   0.0  14.205968  \n",
       "1961-12-10  0.000000   0.0   2.160247  \n",
       "1961-12-17  0.000000   0.0   2.160247  \n",
       "1961-12-24  0.000000   0.0   2.160247  \n",
       "1961-12-31  0.000000   0.0   2.160247  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 15. Calculate the min, max and mean windspeeds and standard deviations of the windspeeds across all locations for each week (assume that the first week starts on January 2 1961) for the first 52 weeks.\n",
    "\n",
    "df_1961 = data[data.index < pd.to_datetime('1962-01-01')]\n",
    "df_1961.resample('W').mean()\n",
    "df_1961.resample('W').min()\n",
    "df_1961.resample('W').max()\n",
    "df_1961.resample('W').std()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 5\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Step 1. Import the necessary libraries\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Step 2. Import the dataset from https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv\n",
    "\n",
    "url = 'https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Step 3. Assign it to a variable called chipo.\n",
    "\n",
    "chipo = pd.read_csv(url, sep = '\\t')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>quantity</th>\n",
       "      <th>item_name</th>\n",
       "      <th>choice_description</th>\n",
       "      <th>item_price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Chips and Fresh Tomato Salsa</td>\n",
       "      <td>NaN</td>\n",
       "      <td>$2.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Izze</td>\n",
       "      <td>[Clementine]</td>\n",
       "      <td>$3.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Nantucket Nectar</td>\n",
       "      <td>[Apple]</td>\n",
       "      <td>$3.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Chips and Tomatillo-Green Chili Salsa</td>\n",
       "      <td>NaN</td>\n",
       "      <td>$2.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>Chicken Bowl</td>\n",
       "      <td>[Tomatillo-Red Chili Salsa (Hot), [Black Beans...</td>\n",
       "      <td>$16.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>Chicken Bowl</td>\n",
       "      <td>[Fresh Tomato Salsa (Mild), [Rice, Cheese, Sou...</td>\n",
       "      <td>$10.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>Side of Chips</td>\n",
       "      <td>NaN</td>\n",
       "      <td>$1.69</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>Steak Burrito</td>\n",
       "      <td>[Tomatillo Red Chili Salsa, [Fajita Vegetables...</td>\n",
       "      <td>$11.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>Steak Soft Tacos</td>\n",
       "      <td>[Tomatillo Green Chili Salsa, [Pinto Beans, Ch...</td>\n",
       "      <td>$9.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>Steak Burrito</td>\n",
       "      <td>[Fresh Tomato Salsa, [Rice, Black Beans, Pinto...</td>\n",
       "      <td>$9.25</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   order_id  quantity                              item_name  \\\n",
       "0         1         1           Chips and Fresh Tomato Salsa   \n",
       "1         1         1                                   Izze   \n",
       "2         1         1                       Nantucket Nectar   \n",
       "3         1         1  Chips and Tomatillo-Green Chili Salsa   \n",
       "4         2         2                           Chicken Bowl   \n",
       "5         3         1                           Chicken Bowl   \n",
       "6         3         1                          Side of Chips   \n",
       "7         4         1                          Steak Burrito   \n",
       "8         4         1                       Steak Soft Tacos   \n",
       "9         5         1                          Steak Burrito   \n",
       "\n",
       "                                  choice_description item_price  \n",
       "0                                                NaN     $2.39   \n",
       "1                                       [Clementine]     $3.39   \n",
       "2                                            [Apple]     $3.39   \n",
       "3                                                NaN     $2.39   \n",
       "4  [Tomatillo-Red Chili Salsa (Hot), [Black Beans...    $16.98   \n",
       "5  [Fresh Tomato Salsa (Mild), [Rice, Cheese, Sou...    $10.98   \n",
       "6                                                NaN     $1.69   \n",
       "7  [Tomatillo Red Chili Salsa, [Fajita Vegetables...    $11.75   \n",
       "8  [Tomatillo Green Chili Salsa, [Pinto Beans, Ch...     $9.25   \n",
       "9  [Fresh Tomato Salsa, [Rice, Black Beans, Pinto...     $9.25   "
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 4. See the first 10 entries\n",
    "\n",
    "chipo.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4622"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 5. What is the number of observations in the dataset?\n",
    "\n",
    "chipo.shape[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 6. What is the number of columns in the dataset?\n",
    "\n",
    "chipo.shape[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['order_id', 'quantity', 'item_name', 'choice_description',\n",
       "       'item_price'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 7. Print the name of all the columns.\n",
    "\n",
    "chipo.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RangeIndex(start=0, stop=4622, step=1)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 8. How is the dataset indexed?\n",
    "\n",
    "chipo.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>quantity</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>item_name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Chicken Bowl</th>\n",
       "      <td>713926</td>\n",
       "      <td>761</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              order_id  quantity\n",
       "item_name                       \n",
       "Chicken Bowl    713926       761"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 9. Which was the most-ordered item?\n",
    "\n",
    "c = chipo.groupby('item_name').sum().sort_values(['quantity'], ascending=False)\n",
    "c.head(1)\n",
    "\n",
    "#Chicken Bowl was the most-ordered item."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>quantity</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>item_name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Chicken Bowl</th>\n",
       "      <td>713926</td>\n",
       "      <td>761</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              order_id  quantity\n",
       "item_name                       \n",
       "Chicken Bowl    713926       761"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 10. For the most-ordered item, how many items were ordered?\n",
    "\n",
    "c = chipo.groupby('item_name').sum().sort_values(['quantity'], ascending=False)\n",
    "c.head(1)\n",
    "\n",
    "#The Chicken Bowl, most ordered item, had 761 ordered items. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order_id</th>\n",
       "      <th>quantity</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>choice_description</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>[Diet Coke]</th>\n",
       "      <td>123455</td>\n",
       "      <td>159</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                    order_id  quantity\n",
       "choice_description                    \n",
       "[Diet Coke]           123455       159"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 11. What was the most ordered item in the choice_description column?\n",
    "\n",
    "c = chipo.groupby('choice_description').sum().sort_values(['quantity'], ascending=False)\n",
    "c.head(1)\n",
    "\n",
    "#Diet Coke was the most ordered item in the choice_description column.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4972"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 12. How many items were orderd in total?\n",
    "\n",
    "chipo.quantity.sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Step 13. \n",
    "#Turn the item price into a float\n",
    "#Check the item price type\n",
    "#Create a lambda function and change the type of item price\n",
    "#Check the item price type\n",
    "\n",
    "dollarizer = lambda x: float(x[1:-1])\n",
    "chipo.item_price = chipo.item_price.apply(dollarizer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "39237.02"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 14. How much was the revenue for the period in the dataset?\n",
    "\n",
    "revenue = (chipo['quantity'] * chipo['item_price']).sum()\n",
    "revenue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1834"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 15. How many orders were made in the period?\n",
    "\n",
    "chipo.order_id.value_counts().count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "18.81142857142869"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 16. What is the average revenue amount per order?\n",
    "\n",
    "order_grouped = chipo.groupby(by=['order_id']).sum()\n",
    "order_grouped['item_price'].mean()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "50"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Step 17. How many different items are sold?\n",
    "\n",
    "chipo.item_name.value_counts().count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "df=pd.read_csv(r\"C:\\Users\\corte\\Downloads\\us-marriages-divorces-1867-2014.csv\")\n",
    "\n",
    "plt.figure()\n",
    "\n",
    "df.plot('Year', y=['Marriages', 'Divorces'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'df_divorces_per_1000' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-60-72a80ccd3888>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 7\u001b[1;33m \u001b[0mdf_marriages_per_1000\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mdf_divorces_per_1000\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0myear\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m'1900'\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0myears\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      8\u001b[0m \u001b[0mdf_marriages_per_1000\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'df_divorces_per_1000' is not defined"
     ]
    }
   ],
   "source": [
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "df = pd.read_csv(r\"C:\\Users\\corte\\Downloads\\us-marriages-divorces-1867-2014.csv\")\n",
    "\n",
    "df_marriages_per_1000 = df_divorces_per_1000.year['1900', years]\n",
    "df_marriages_per_1000.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline\n",
    "\n",
    "\n",
    "df = pd.read_csv(r\"C:\\Users\\corte\\Downloads\\actor_kill_counts.csv\")\n",
    "plt.barh(df['Actor'], df['Count'])\n",
    "plt.ylabel(\"Actor\")\n",
    "plt.xlabel(\"Kill count\")\n",
    "plt.title(\"Actor's kill count\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x648 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "df = pd.read_csv(r\"C:\\Users\\corte\\Downloads\\roman-emperor-reigns.csv\")\n",
    "df.head()\n",
    "\n",
    "df1 = df[df['Cause_of_Death'] == \"Assassinated\" ]\n",
    "df1.head()\n",
    "\n",
    "fig= plt.figure(figsize=(9,9))\n",
    "\n",
    "patches, texts = plt.pie(df1.Length_of_Reign, shadow=True, startangle=90)\n",
    "plt.legend(df1.Emperor, loc=\"best\")\n",
    "plt.axis('equal')\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYsAAAEICAYAAACuxNj9AAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO3deXhdVbnH8e8vaTpQ2tLSFkpbbIECgiJDGEWggILKLEIRBYcrwkUZrnoFB1DRizigIoJwkQt4uSAiCCKjzCpTChQoBawUpVBoGTtPyXv/2Cv0EJJzdpPsnJPm93me82TvtffZ+z1Jmzdr2GspIjAzMyunrtoBmJlZ7XOyMDOzipwszMysIicLMzOryMnCzMwqcrIwM7OKnCzMzKyifpVOkFQHvA/YAFgCTI+Il4sOrKtGjhwZEyZMqHYYZma9xsiRI7nllltuiYh92x7rMFlI2hj4GrA38HdgHjAQ2FTSYuAC4NKIaCkm7K6ZMGECTU1N1Q7DzKxXkTSyvfJyNYvvAecDX4g2j3lLGg18AvgUcGl3BWlmZrWpw2QREUeUOTYX+FkhEZmZWc3psINb0vaS1i/ZP0rSdZLOkTSi0oUlXSxprqQnSsq2lnS/pEclNUnaoeTYqZJmSnpa0j4l5dtJejwdO0eSOvdRzcyss8qNhroAWA4gaTfgB8BlwJvAhTmufQnQtpPkh8B3ImJr4LS0j6QtgCnAluk950mqT+85HzgGmJRe7+h4MTOzYpVLFvUR8VraPhy4MCJ+HxHfAjapdOGIuAd4rW0xMDRtDwNeTNsHAldGxLKImAXMBHaQNAYYGhH3pX6Ty4CD8nwwM7M+58XnYMZUWLyw2y9droO7XlK/iFgJ7EX2132e95VzEnCLpB+TJapdUvlY4P6S82anshVpu225mZm1evNVOOuL8PxMqO8HzSvgsC/C/p/utluUq1lcAdwt6Tqy5yvuBZC0CVlTVGccB5wcEeOBk4Ffp/L2+iGiTHm7JB2T+kKa5s2b18kQzcx6mR+fBM89BcuXwpKFsHwZ/O6X8Mg93XaLDpNFRHwf+DJZ38OuJcNn64AvdfJ+RwPXpO3fAa0d3LOB8SXnjSNropqdttuWdxTzhRHRGBGNo0aN6mSIZma9yNwXYNYMaF759vJlS+GGy7rtNuVGQ40AngHuBgZIGi5JEfFMRDzcyfu9COyetvcke9gP4HpgiqQBkiaSdWQ/GBFzgAWSdkqjoI4Cruvkvc3M1jwL34B+HfQMvNm227jzyvU9TGVVk09rc9DakqYB/xYRz5W7sKQrgD2AkZJmA6cDnwd+LqkfsJTUDxIR0yVdBTwJrASOj4jmdKnjyGo3g4Cb0svMzADGbQLtLY/drwG2263bbqPVXYNb0iHAMe3NHVJLGhsbw9N9mFmfcOc1cPGZWV8FAQ39Ycg6cNbVMHT4al1K0tSIaGxbvtqjmiLiGknfXN33mZlZQSYfAmMmZH0Ur70M23wA9v1EljC6yWonC0lr46nNzcxqy+bbZq+ClJt19j/aKR4OHACcW1hEZmZWc8rVLIa02Q/gJeCTEfF4cSGZmVmtKTfr7Hd6MhAzM6td5Z6zuFDSezo4NljSZyUdWVxoZmZWK8o1Q50HnCbpvcATrFopbxLZZIAXA5cXHqGZmVVduWaoR4HD0uinRmAM2RxRMyLi6R6Kz8zMakDFobMRsRC4q/hQzMysVvl5CTMzq8jJwszMKnKyMDOziso9wf1Hyiw0FBEHFBKRmZnVnHId3D9OXw8B1gf+N+0fATxXYExmZlZjyg2dvRtA0hkRUTop+h8ldd9afWZmVvPy9FmMkrRR605ayc5rlpqZ9SF5pig/GbhL0rNpfwLwhcIiMjOzmpPnobybJU0CNk9FT0XEsmLDMjOzWlKxGUrSWsBXgS9GxDRgQ0n7FR6ZmZnVjDx9Fv8DLAd2Tvuzge8VFpGZmdWcPH0WG0fE4ZKOAIiIJZJUcFxmZqs0r4BnboNn74W6OthkL9h4j2zbekSeZLFc0iDSA3qSNgbcZ2FmPSNa4M/fg1efheblWdnrz8OLj8Lu7a3+bEXIk5ZPB24Gxku6HLgd+M9CozIza/XiNHjtuVWJAqB5GbzwaJZArEfkGQ11m6SHgZ0AASdGxCuFR2ZmBvDSdFi59J3l0QxzZ8C6G73zmHW7cnNDbdumaE76uqGkDSPi4eLCMjNLBq0D9Q1Zv0Wpun4wcJ3qxNQHlatZ/CR9HUi2Ut40sprFVsADwK7FhmZmBkz8AEy76p3ldfUwfvuej6eP6rDPIiImR8Rk4J/AthHRGBHbAdsAM3sqQDPr4wYNgz1PgYHDoN9A6DcABo+CD54G/fpXO7o+I89oqM0j4vHWnYh4QtLWBcZkZvZ2620Bh/4KXv9X1vw0bCx4BH+PypMsnpJ0EdkU5QF8EphRaFRmZm2pDkZMqHYUfVaeobOfBqYDJwInAU8CnykwJjOz3mPJErjgAvjwh+Hoo+HBB6sdUSHK1iwk1QM3RMTewE97JiQzs15i8WLYeWeYOTPbluDqq+Hss+ELa9bk3GVrFhHRDCyWNGx1LyzpYklzJT3RpvxLkp6WNF3SD0vKT5U0Mx3bp6R8O0mPp2PneKoRM6sZF1+8KlEARGTbJ58MCxdWN7ZulqfPYinwuKTbgEWthRFxQoX3XQKcC1zWWiBpMnAgsFVELJM0OpVvAUwBtgQ2AP4sadOUrM4HjgHuB24E9gVuyvXpzMyKdM01qxJFqYYGeOAB2Guvno+pIHmSxZ/Sa7VExD2SJrQpPg74Qet6GBExN5UfCFyZymdJmgnsIOk5YGhE3Acg6TLgIJwszKwWjBjRfnlLCwxb7QaZmpZnuo9Lu/F+mwIfkPR9shrLVyLiIWAsWc2h1exUtiJtty03M6u+44+Hm256e+1CgtGjYbvtqhdXAfIsfjRJ0tWSnpT0bOurk/frBwwnm2fqq8BVqQ+ivX6IKFPeUazHSGqS1DRv3rxOhmhmltPkyfDtb8PAgTB0KAwZAhtuCDffvMY9B5J38aPzgZXAZLI+iN908n6zgWsi8yDQAoxM5eNLzhsHvJjKx7VT3q6IuDA9ad44atSoToZoZrYavvpVeOEFuPzyLEk8+yxMmlTtqLpdnmQxKCJuBxQR/4yIbwN7dvJ+f2h9r6RNgf7AK8D1wBRJAyRNBCYBD0bEHGCBpJ1SDeQo4LpO3tvMrBgjRsB++8Euu6yxCzLlGg0lqQ74u6QvAi8Aoyu9SdIVwB7ASEmzydbFuBi4OA2nXQ4cHREBTJd0FdkDfyuB49NIKMg6xS8BBpF1bLtz28yshyn7XV3mBGl7suk91gHOAIYCP4qI+8u+scoaGxujqamp2mGYmfUqkqZGRGPb8jw1i1cjYiGwEE/zYWbWJ+VJFpdIGgs8BNwD3Fs6C62Zma358jxnsZuk/sD2ZH0Qf5K0dkR08DSKmZmtaSomC0m7Ah9Ir3WAG4B7C47LzMxqSJ5mqLuBJuBM4MaIWF5sSGZmVmvyJIt1gfcDuwEnSGoB7ouIbxUamZmZ1Yw8fRZvpOk9xpM9Qb0L0FB0YGZmVjvy9Fn8A3ga+AvwK+AzbooyM+tb8jRDTYqIltYdSe+X9ImIOL7AuMzMrIbkaYZqkbQ1cARwODALuKbowMzMrHZ0mCzSRH9TyJLEq8BvyaYHmdxDsZmZWY0oV7N4iux5iv0jYiaApJN7JCozM6sp5ebS/RjwEnCnpP+WtBftL0ZkZmZruA6TRURcGxGHA5sDdwEnA+tJOl/Sh3ooPjMzqwEVV+mIiEURcXlE7Ef2nMWjwCmFR2ZmZjVjtZZ0iojXIuKCiOjsSnlmZtYLrZnr/5mZWbdysjAzs4oqJgtJg9Ma3EjaVNIBkjw3lJlZH5KnZnEPMDCtlnc72dKqlxQZlJmZ1ZY8yUIRsRg4BPhFRBwMbFFsWGZmVkvyTCQoSTsDRwKfW433mVkfsHDxs7z65v2sbFnE0LU2Y8SwHaivG1jtsKyb5fmlfxJwKnBtREyXtBFwZ7FhmVlv8Mobf2Pu63cRsQKAZcvn8vqCR9h43BecMNYweWadvRu4W9LgtP8scELRgZlZbWtuWcbc1+8kYuVbZRErWdm8kNfebGLU8F2rGJ11tzyjoXaW9CQwI+2/T9J5hUdmZjVt6bIXEfXvKI9YycLFz1QhIitSng7unwH7kE1TTkRMI1uP28z6sPr6tQha2j3Wr9+QHo7GipbrobyIeL5NUXMBsZhZLzKgYTT9+w2n7WTUUgPrDtuxOkFZYfIki+cl7QKEpP6SvkJqkjKzvksS7xpzJAP6j0ZqoE4DkBpYf919WGvghtUOz7pZntFQxwI/B8YCs4FbgX8vMigz6x0a+g1lk3HHsmz5PJpbljCw/xjq6jzBw5ooT7LYLCKOLC2Q9H7gr8WEZGa9zYD+o6odghUsTzPUL3KWmZnZGqrDmkV6ansXYJSk/yg5NBTaGS9nZmZrrHI1i/7A2mQJZUjJaz5waKULS7pY0lxJT7Rz7CuSQtLIkrJTJc2U9LSkfUrKt5P0eDp2jiSvA25m1sM6rFmUPLl9SUT8sxPXvgQ4F7istFDSeOCDwL9KyrYApgBbAhsAf5a0aUQ0A+cDxwD3AzcC+wI3dSIeMzPrpDx9Fosl/UjSjZLuaH1VelNE3AO81s6hnwL/CURJ2YHAlRGxLCJmATOBHSSNAYZGxH0REWSJ56AcMZuZWTfKkywuB54CJgLfAZ4DHurMzSQdALyQngIvNRYoffBvdiprHa7btryj6x8jqUlS07x58zoTopmZtSNPslg3In4NrIiIuyPis8BOq3sjSWsB3wBOa+9wO2VRprxdEXFhRDRGROOoUR7KZ2bWXfI8Z7EifZ0j6aPAi8C4TtxrY7LaybTURz0OeFjSDmQ1hvEl545L95nd5l6t5WZm1oPy1Cy+J2kY8GXgK8BFwMmre6OIeDwiRkfEhIiYQJYIto2Il4DrgSmSBkiaCEwCHoyIOcACSTulUVBHAdet7r3NzKxrytYsJNUDkyLiBuBNYHLeC0u6AtgDGClpNnB6as56h7So0lXAk8BK4Pg0EgrgOLKRVYPIRkF5JJSZWQ9TNsiozAnSnRGRO0nUisbGxmhqaqp2GGZmvYqkqRHR2LY8T5/F3ySdC/wWWNRaGBEPd2N8ZmZWw/Iki13S1++WlAWwZ/eHY2ZmtSjPGty9rgnKzMy6V541uIdJOrv1YTdJP0mjo8zMrI/IM3T2YmABcFh6zQf+p8igzMystuTps9g4Ij5Wsv8dSY8WFZCZmdWePDWLJZJ2bd1Jq+QtKS4kMzOrNXnX4L6spJ/ideDo4kIyM7NakydZzI+I90kaChAR89OUHGZm1kfkaYb6PWRJIiLmp7KriwvJzMxqTbk1uDcnW7lumKRDSg4NBQYWHZiZmdWOcs1QmwH7AesA+5eULwA+X2RQZmZWW8qtwX0dcJ2knSPivh6MyczMakyePotjJa3TuiNpuKSLC4zJzMxqTJ5ksVVEvNG6ExGvA9sUF5KZmdWaPMmiTtLw1h1JI8g35NbMzNYQeX7p/4RsTYvW4bIfB75fXEhmZlZr8kxRfpmkJlatX3FIRDxZbFhmZlZL8jRDATQAKtk2M7M+JM96FicClwMjgdHA/0r6UtGBmZlZ7cjTZ/E5YMeIWAQg6SzgPuAXRQZmZma1I08zlIDmkv1mVjVJmZlZH5CnZvE/wAOSrk37BwG/Li4kMzOrNXlGQ50t6S5gV7IaxWci4pGiAzMzs9pRMVlIei+wMTAHmBERTxQelZmZ1ZRyU5QPA64DxgOPkdUq3ivpX8CBJWtbmJnZGq5cB/cZQBMwKSIOjoiDgE2Bh/AT3GZmfUq5Zqi9ySYRbGktiIhmSV8HHi88MjMzqxnlahbLI2Jl28JUtqy4kMzMrNaUq1kMlLQN73ymQsCA4kIyM7NaUy5ZzAHO7uDYSwXEYmZmNarcsqqTu3LhtJrefsDciHhPKvsR2Xrey4F/kD2z8UY6dirZ1CLNwAkRcUsq3w64BBgE3AicGBHRldjMzGz15J11tjMuAfZtU3Yb8J6I2Ap4BjgVQNIWwBRgy/Se8yTVp/ecDxwDTEqvttc0M7OCFZYsIuIe4LU2ZbeWdJrfD4xL2wcCV0bEsoiYBcwEdpA0BhgaEfel2sRlZNONmJlZDyqyZlHJZ4Gb0vZY4PmSY7NT2di03bbczMx6UJ71LCTpk5JOS/sbStqhKzeV9A1gJdk6GdD+LLZRpryj6x4jqUlS07x587oSopmZlchTszgP2Bk4Iu0vAH7Z2RtKOpqs4/vIko7q2WTTirQaB7yYyse1U96uiLgwIhojonHUqFGdDdHMzNrIkyx2jIjjgaUAEfE60L8zN5O0L/A14ICIWFxy6HpgiqQBkiaSdWQ/GBFzgAWSdpIk4Ciy+arMzKwH5VnPYkUamRQAkkYBLeXfApKuAPYARkqaDZxONvppAHBb9ruf+yPi2IiYLukq4Emy5qnjI6J1waXjWDV09iZW9XOYmVkPUaVHFiQdCRwObAtcChwKfDMifld8eJ3X2NgYTU1N1Q7DzKxXkTQ1IhrbludZ/OhySVOBvcg6nA+KiBkFxGhmZjUqz+JHOwHTI+KXaX+IpB0j4oHCozMzs5qQp4P7fGBhyf6iVGZmZn1EnmSh0rmY0voWeTrGzcxsDZEnWTwr6QRJDel1IvBs0YGZmVntyJMsjgV2AV4ge0huR7KJ/czWCMtiGXNaXmZ+LKh2KGY1K89oqLlkM8KarVEigqktjzI9nqKOelpoYRTrsnf97vRXp547NVtj5RkNNQr4PDCh9PyI+GxxYZkVb2bM4sl4mmZaaE7Pmc7lFe5p+Rt71+9R3eDMakyejurrgHuBP5MtTGS2RniiZQYr2/yTbqGF2TGHZbGMAfLqwWat8iSLtSLia4VHYtbDlrGs3XIhlrOCAV5q3uwteTq4b5D0kcIjMethYzUGtTMLfgMNrM3gKkRkVrvyJIsTyRLGUknzJS2QNL/owMyKtk3dVvSnP3Ul/w36Uc+udTuSJro0syTPaKghPRGIWU9bW4M5pP6jPNHyFC/FywzR2rynbgtGakS1QzOrOXlGQwk4EpgYEWdIGg+MiYgHC4/OrGCDNIjt67epdhhmNW91Vsr7RNpfSBdWyjMzs94nz2ioHSNiW0mPQLZSnuQnlszM+pI8NYtOrZRnZmZrjjzJ4hzgWmC0pO8DfwH+q9CozMyspnilPDMzq6jDZCFpaETMlzQCmAtcUXJsRES81hMBmplZ9ZWrWfwfsB8wldRfkSjtb1RgXGZmVkM6TBYRsV/6OrHnwjEzs1pUsYNb0sGShpXsryPpoGLDMjOzWpJnNNTpEfFm605EvAGcXlxIZmZWa/Iki/bOyfMwn5mZrSHyJIsmSWdL2ljSRpJ+StbpbWZmfUSeZPElYDnwW+B3wFLg+CKDMjOz2pLnobxFwCkAkoYDb0RElH+XmZmtSTqsWUg6TdLmaXuApDuAmcDLkvbuqQDNzKz6yjVDHQ48nbaPTueOBnbHc0OZmfUp5ZLF8pLmpn2AKyKiOc0L5dFQZmZ9SLlksUzSe9KU5JOBW0uOrVXpwpIuljRX0hMlZSMk3Sbp7+nr8JJjp0qaKelpSfuUlG8n6fF07Bx5cWQzsx5XLlmcCFwNPAX8NCJmAUj6CPBIjmtfAuzbpuwU4PaImATczqqO8y2AKcCW6T3npTU0AM4HjgEmpVfba5qZWcHKzQ31ALB5O+U3AjdWunBE3CNpQpviA4E90valwF3A11L5lRGxDJglaSawg6TngKERcR+ApMuAg4CbKt3fzMy6T57nLLrTehExByB9HZ3KxwLPl5w3O5WNTdtty83MrAf1dLLoSHv9EFGmvP2LSMdIapLUNG/evG4LzsysryubLCTVSdqlG+/3sqQx6dpjyBZVgqzGML7kvHHAi6l8XDvl7YqICyOiMSIaR40a1Y1hm5n1bWWTRUS0AD/pxvtdT/bMBunrdSXlU9LDfxPJOrIfTE1VCyTtlEZBHVXyHjMz6yF5mqFulfSx1R2yKukK4D5gM0mzJX0O+AHwQUl/Bz6Y9omI6cBVwJPAzcDxEdGcLnUccBHZ0+P/wJ3bZmY9TpWmeZK0ABgMNANLSMuqRsTQ4sPrvMbGxmhqaqp2GGZmvYqkqRHR2LY8z0SCQ4oJyczMeos8y6pK0iclfSvtj5e0Q/GhmZlZrcgzx9N5QAuwJ3AGsBD4JbB9gXFZD3s9lnFnyxyeYxHvYjB71o1huAZUOywzqxF5ksWOEbGtpEcAIuJ1Sf0Ljst60IuxmP9qfowVtLCS4Gne5I7mlzi1/r2M0+Bqh2dmNSDPaKgVaZ6mAEgTC7YUGpX1qMubn2UJzaxMzzuuJFhKM//b/GyVIzOzWpEnWZwDXAuMlvR94C/AmYVGZT3qGea3Wz6T+XhRRDODfKOhLpc0FdiLbNjsQWlNC1tD9KeOpTS/o7yBOjwjvJlBvtFQv4mIpyLilxFxbkTMkPSbngjOesYHNJqGNtNwNSDer9EdvMPM+po8zVBblu6k/ovtignHquFjdRPYXOvQQB2DqKeBOjZlGIfVTah2aGZWIzpshpJ0KvB1YJCk+ayaAXY5cGEPxGY9pEF1nFS/BS/FEubEYtbXIMao4mKIZtaHlFv86EzgTElnRsSpPRiTVcn6GsT6GlTtMMysBuV5zuImSbu1LYyIewqIx8zMalCeZPHVku2BwA7AVLInus3MrA/IM3R2/9J9SeOBHxYWkZmZ1ZzOLKs6G3hPdwdiZma1q2LNQtIvWLXudR2wNTCtyKDMzKy25OmzKF1BaCVwRUT8taB4zMysBuXps7g0zTK7OVkN4+nCozIzs5qSpxnqI8AFZOtfC5go6QsR4bWwu9HyCB5euhSAbQcOpL/nZDKzGpKnGepsYHJEzASQtDHwJ6DPJotogcWvwsBhUN8NK3vcu3gxX3755bf26yR+tt567DTID8iZWW3IMxpqbmuiSJ4F5hYUT82b9hv4yRj46Xg4azjc+mVoWdn5672yciUnvfwyiyLeei1oaeGLL73EG83vnAnWzKwa8tQspku6EbiKrM/i48BDkg4BiIhrCoyvpvz9RvjTsbBicbbfDDT9KksW+/68c9e8edEiOlox4tZFizhs6NDOXdjMrBvlqVkMBF4Gdgf2AOYBI4D9gf0Ki6wG3f3dVYmi1YrFMPW/YcWSzl1zfksLy9tZYGh5qmGYmdWCPKOhPtMTgfQGb8zq4IBgyavQMG71r7nLoEFc/MYbLGmTMBokdnGfhZnViDyjoSYCXwImlJ4fEQcUF1ZtGrMdzGynW7++AQav17lrvm/AAHZfay3uXrz4rYQxSGKfwYN594ABXYjWzKz75Omz+APwa+CPQJ9uF9nze/DPu9/eFNWwFux5RpYwOkMSPxo9mj8vWsR1Cxci4OAhQ9hzLa8nYWa1I0+yWBoR5xQeSZUtXhL8/o8t3PXXoKEBPrK3+OgH66ivX/W8w5ht4dP3wO2nwItNMGQs7H46bPnxrt27TuJDa6/Nh9Zeu4ufwsysGIp2OlffdoL0CWAScCuwrLU8Ih4uNrSuaWxsjKampsonAitWBiec0swLL8GKFVnZgP7QuLX45pfrC4zSzKy2SJoaEY1ty/PULN4LfIps/YrWZqhgDVrP4q8PBC/NXZUoAJYth6ZHg1n/DCa+y09Tm1nflidZHAxsFBHLiw6mWh57Mli6rP1jM55xsjAzy5MspgHrsAY/tb3eSGhoeHvNAqCuHtYdUZ2Y8nr8tWaumrWcFc1wwLsa2Hl0PfK8UmbWzfIki/WApyQ9xNv7LNaYobMfnFzHldc2U5orJFhrYNZvUat+Pn0pZ01bxrLmrF3wNzOXc9hG/Tl7x4FOGGbWrfIki9O7+6aSTgb+jex33OPAZ4C1gN+SPc/xHHBYRLyezj8V+BzZDBsnRMQt3RnPiHXE979Rz1nnNPPmfIiA8WPh6yfXv200VC2ZvaiFM1OiaLW4Ga6atZwpGzWw4+g8P1ozs3zyPMF9t6T1gO1T0YMR0ekmKUljgROALSJiiaSrgCnAFsDtEfEDSacApwBfk7RFOr4lsAHwZ0mbRkS3zrK3xWbiknPrmfMyNPSDUSNrM0m0uu2FFe3O1bJkJdzw/AonCzPrVhXnhpJ0GPAg2QSChwEPSDq0i/ftBwyS1I+sRvEicCBwaTp+KXBQ2j4QuDIilkXELGAmsEMX798uSWywvmo+UQAMqBd17YRZLxjo0b5m1s3yTCT4DWD7iDg6Io4i+0X9rc7eMCJeAH4M/AuYA7wZEbcC60XEnHTOHGB0estY4PmSS8xOZX3ah8f1o6WdR2T61cGhE7thkQ0zsxJ5kkVdm2anV3O+r12ShpPVFiaSNSsNlvTJcm9pp6zdJwklHSOpSVLTvHnzOhtirzB8QB0X7TqIQfWwdj8Y3A8G1MF3tx3IZsNctTCz7pWnYftmSbcAV6T9w+naKnl7A7MiYh6ApGuAXYCXJY2JiDmSxrBqqO5sYHzJ+8eRNVu9Q0RcCFwI2RPcXYixV/jIhv2ZcWgDN89ewcoW2HtsP9Yb1Ok8bmbWoTwd3F9NCx3tSvZX/oURcW0X7vkvYCdJawFLgL2AJmARcDTwg/T1unT+9cD/STqbrCYyiawPxYBh/cXhG7nZycyK1WGykLQJWT/CX9NqeNek8t0kbRwR/+jMDSPiAUlXAw8DK4FHyGoDawNXSfocWUL5eDp/ehox9WQ6//juHgllZmbldTiRoKQbgK9HxGNtyhuB0yNi/x6Ir9NWZyJBMzPLdDSRYLkG7gltEwVARDSRPThnZmZ9RLlkMbDMMa/3aWbWh5RLFg9J+nzbwtSnMLW4kMzMrNaU67NYD7gWWM6q5NAI9AcOjoiXeiTCTpI0D/hnD91uJPBKD92rCL09fuj9n6G3xw+9/zP09vih65/hFYCI2LftgTwr5U0G3pN2p0fEHV0IZI0kqam9DqHeorfHD73/M/T2+KH3f4beHj8U+xnyPGdxJ3BnETc3M7PewY/7mplZRU4W3ePCagfQRb09fuj9n6G3xw+9/zP09vihwM9Qsc/CzMzMNQszM6vIyXlt/LoAAAkjSURBVCInSRdLmivpiQ6OHynpsfT6m6T39XSM5eSI/8AU+6NpmvddezrGSip9hpLztpfU3A2LdHWrHD+DPSS9mX4Gj0o6radjrCTPzyB9jkclTZd0d0/GV0mOn8FXS77/T6R/RyN6Os5ycnyGYZL+KGla+hl8pltuHBF+5XgBuwHbAk90cHwXYHja/jDwQLVjXs3412ZVs+RWwFPVjnl1P0M6px64A7gROLTaMa/mz2AP4IZqx9nFz7AO2aSfG6b90dWOeXX/DZWcuz9wR7Vj7sTP4OvAWWl7FPAa0L+r93XNIqeIuIfsm97R8b9FxOtp936ydTdqRo74F0b61wUMpoMFpqqp0mdIvgT8nlXrodSMnPHXtByf4RPANRHxr3R+Tf0cVvNncASr1vGpGTk+QwBDJInsj8DXyGbs7hIni2J8jq4tEFUVkg6W9BTwJ+Cz1Y5ndUkaCxwM/KrasXTBzqn54CZJW1Y7mE7YFBgu6S5JUyUdVe2AOiOtt7Mv2R8evc25wLvJFol7HDgxIlq6etE8K+XZakhPvH+ObLGoXiWyRa2ulbQbcAbZqoa9yc+Ar0VEc/ZHVa/zMPCuiFgo6SPAH8gW++pN+gHbkS1qNgi4T9L9EfFMdcNabfsDf42I3lgT3Ad4FNgT2Bi4TdK9ETG/Kxd1zaIbSdoKuAg4MCJerXY8nZWquRtLGlntWFZTI3ClpOeAQ4HzJB1U3ZDyi4j5EbEwbd8INPTCn8Fs4OaIWBQRrwD3ADU12COnKdRgE1ROnyFrCoyImAnMAjbv6kWdLLqJpA3JVhP8VC/8KwpJm6Q2TiRtSzZhZK9KeBExMSImRMQE4Grg3yPiD1UOKzdJ65f8DHYg+//Zq34GZMshf0BSv9SUsyMwo8oxrRZJw4DdWbW0c2/zL7KaXeuEsJsBz3b1om6GyknSFWSjVUZKmg2cDjQARMSvgNOAdcn+mgVYGTU0KVmO+D8GHCVpBdna6IeXdHjXhByfoabliP9Q4DhJK8l+BlN6288gImZIuhl4DGgBLoqIskOde1LOf0MHA7dGxKKqBFlBjs9wBnCJpMcBkTXNdnk2XT/BbWZmFbkZyszMKnKyMDOzipwszMysIicLMzOryMnCzMwqcrKwLpG0bsksnS9JeqFkv3+bc09KY+8rXfMuSe0OO5Y0StIKSV/ors/Qzj2eW52H4VK8T6dpOh6StHVRsXU3SdtIuihtf1vSV9o5ZwNJV6ftPSTdkLY/LenctH1sd07tIam/pHskeXh/jXCysC6JiFcjYuuI2JpsTqaftu5HxPI2p58EVEwWFXycbKLGIzo6QVJ9F+/RGUdGxPuA84AfVeH+nfV14BflToiIFyOi7HTv6RmLy7orqPRv53bg8O66pnWNk4V1O0l7SXpE0uNp7v0Bkk4ANgDulHRnOu98ZWtnTJf0nZyXPwL4MjAuTRzYes+Fkr4r6QGyyfiOUrY+xzRJv0nn7C/pgRTbn9PTra21o1tT+QVkDzK1XveTkh5MNaULciSi+4Cx6b2D0+d/KF37wFT+QOkkgalmsl2Z8z8t6RpJN0v6u6Qfln7uku1DJV2StkdJ+n261kOS3t82UElDgK0iYlpJ8fsk3ZHu8/l03gRVXkPkrVqJpK0l3Z++/9dKGl7yOc9K389nJH0glW9Z8j1+TFLrfFh/AI6s8P22HuJkYd1tIHAJ2RPg7yWbJeC4iDiHbBbMyRExOZ37jfSU+1bA7srm1uqQpPHA+hHxIHAVb/+rczDZ/P47Aq8D3wD2TH/tn5jO+QuwU0RsA1wJ/GcqPx34Syq/Htgw3e/d6R7vTzWnZir/8tqX7JccKYY7ImJ7YDLwI0mD070PS/cYA2wQEVPLnA+wdYrlvcDh6XtRzs/Jannbkz2df1E75zQCbZPAVsBHgZ2B0yRtUOE+7bmM7KnhrchmPT295Fi/iNiBrJbZWn4s8PP0PW4km1+KFNv2nbi/FcDtgdbd6oFZJfNjXQocTzYjbFuHSTqG7N/hGGALsmkiOjKFLElA9gv318DZab+ZVdNJ7wlc3TrFQcnMoeOA36Zf0P3JJliDbDGZQ9K5f5LUui7JXmQzqD6kbAqXQXS8Tsbl6Rd7PdnCNAAfAg4o6QcYSJaIrgJuI/tleRjwuwrnA9weEW8CSHoSeBfwfAexQDZj8BZaNfvuUElDImJByTljgHlt3nddRCwBlqQa4A5kM5jmomxepXUionWFvEtLPh9k86cBTAUmpO37gG9IGkc2Ad7fAdLswcvbiduqwMnCuluu+XQkTQS+AmwfEa+n5pOBFd52BLCepNa/7jeQNCn9clkaEc2tl6f9xZt+AZwdEddL2gP4dsmx9s4XcGlEnJrjIx0JTAN+APySLPkI+FhEPP2OC0uvpprU4UBrZ32750vaEVhWUtTMqv+7pXGXfv/qgJ3TL/6OLOGd3/O234fung+o9XO89Rki4v9S8+FHgVsk/VtE3JHOGwAs7eYYrBPcDGXdbSAwQdImaf9TQOtfmQuAIWl7KFlieTP1HXy43EUlbQYMjoixJTPLnklW22jrdrJay7rpva1rKA8DXkjbR5ecfw+peUnSh4HhJdc5VNLo1utIeldHMUbECuCbwE6pCesW4EvSWzPJblNyemsz2LCIeDyVlTu/Iy9LerekOrIJ8FrdCnyxdUftj9CaAWzSpuxASQPT924P4KEcMbwl1X5eb+2P4O0//3ZJ2gh4NjVVXk/WFEaKYV76vlqVOVlYd1tKNp/+75TNetnCqpXrLgRuknRn6lR9BJgOXAz8tcJ1jwCubVP2e9oZFRUR04HvA3dLmsaqpqpvp7juBUpn4fwOsJukh8maglqXBH2S7Jf/rZIeI2s6GlMuyPSX/E/Iak1nkM0G+ljqID6j5NSreXuzGhXO78gpwA1k647PKSk/AWhMHcZPkvULtI31KWBY6uhu9SDZSon3A2dExIs5YmjraLL+lsfI+lq+W+H8w4EnJD1Ktu5C66iqyWRrqVsN8KyzZn2YpJOBBRHRXgd4VUm6Bji1vWY863muWZj1befz9v6QmqDsgc4/OFHUDtcszMysItcszMysIicLMzOryMnCzMwqcrIwM7OKnCzMzKwiJwszM6vo/wH0FRHPOCcHegAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "data=pd.read_csv(r'C:\\Users\\corte\\Downloads\\arcade-revenue-vs-cs-doctorates.csv')\n",
    "data\n",
    "\n",
    "plt.scatter(x=\"Total Arcade Revenue (billions)\",y=\"Computer Science Doctorates Awarded (US)\",c=data.Year,cmap=\"rainbow\",data=data)\n",
    "\n",
    "plt.xlabel('Total Arcade Revenue (billions)')\n",
    "\n",
    "plt.ylabel('Computer Science Doctorates Awarded (US)')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
